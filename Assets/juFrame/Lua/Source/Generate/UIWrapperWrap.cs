//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UIWrapperWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UIWrapper), typeof(MonoLoader));
		L.RegFunction("GetUserData", GetUserData);
		L.RegFunction("SetUserData", SetUserData);
		L.RegFunction("RemoveUserData", RemoveUserData);
		L.RegFunction("CheckET", CheckET);
		L.RegFunction("RemoveEventTriggers", RemoveEventTriggers);
		L.RegFunction("BindETBeginDrag", BindETBeginDrag);
		L.RegFunction("BindETEndDrag", BindETEndDrag);
		L.RegFunction("BindETDrag", BindETDrag);
		L.RegFunction("BindETButtonDown", BindETButtonDown);
		L.RegFunction("BindETButtonUp", BindETButtonUp);
		L.RegFunction("BindETTouchEnter", BindETTouchEnter);
		L.RegFunction("BindETTouchExit", BindETTouchExit);
		L.RegFunction("FireButtonClick", FireButtonClick);
		L.RegFunction("UnbindAllButtonClick", UnbindAllButtonClick);
		L.RegFunction("BindButtonClick", BindButtonClick);
		L.RegFunction("BindButtonMultipleClick", BindButtonMultipleClick);
		L.RegFunction("BindLostFocus", BindLostFocus);
		L.RegFunction("SetNaiveSize", SetNaiveSize);
		L.RegFunction("UnbindAllLostFocus", UnbindAllLostFocus);
		L.RegFunction("FireLostFocus", FireLostFocus);
		L.RegFunction("OnPointerClick", OnPointerClick);
		L.RegFunction("SimulateButtonClick", SimulateButtonClick);
		L.RegFunction("ClickButton", ClickButton);
		L.RegFunction("OnPointerDown", OnPointerDown);
		L.RegFunction("BindButtonDown", BindButtonDown);
		L.RegFunction("OnPointerUp", OnPointerUp);
		L.RegFunction("BindButtonUp", BindButtonUp);
		L.RegFunction("BindButtonLongPressed", BindButtonLongPressed);
		L.RegFunction("get_Item", get_Item);
		L.RegFunction("GOI", GOI);
		L.RegFunction("GO", GO);
		L.RegFunction("LoadAsset", LoadAsset);
		L.RegFunction("GOT", GOT);
		L.RegFunction("Clean", Clean);
		L.RegFunction("IsShow", IsShow);
		L.RegFunction("SetShow", SetShow);
		L.RegFunction("Show", Show);
		L.RegFunction("Hide", Hide);
		L.RegFunction("ShowChild", ShowChild);
		L.RegFunction("HideChild", HideChild);
		L.RegFunction("IsChildShow", IsChildShow);
		L.RegFunction("SetChildShow", SetChildShow);
		L.RegFunction("AddChild", AddChild);
		L.RegFunction("DOFade", DOFade);
		L.RegFunction("SetAlpha", SetAlpha);
		L.RegFunction("MoveTextEnd", MoveTextEnd);
		L.RegFunction("BindInputFiledValueChanged", BindInputFiledValueChanged);
		L.RegFunction("SetTextColor", SetTextColor);
		L.RegFunction("LoadSprite", LoadSprite);
		L.RegFunction("LoadAtlas", LoadAtlas);
		L.RegFunction("LoadAtlasAsync", LoadAtlasAsync);
		L.RegFunction("SetBlackWhiteMode", SetBlackWhiteMode);
		L.RegFunction("SetShadow", SetShadow);
		L.RegFunction("Close", Close);
		L.RegFunction("DelayClose", DelayClose);
		L.RegFunction("FollowTarget", FollowTarget);
		L.RegFunction("AddLayerSortingOrder", AddLayerSortingOrder);
		L.RegFunction("FireToggleValueChanged", FireToggleValueChanged);
		L.RegFunction("BindToggleValueChanged", BindToggleValueChanged);
		L.RegFunction("BindScrollRectValueChanged", BindScrollRectValueChanged);
		L.RegFunction("PlayUIEffect", PlayUIEffect);
		L.RegFunction("PlayUIEffectForever", PlayUIEffectForever);
		L.RegFunction("LoadUIEffect", LoadUIEffect);
		L.RegFunction("StopUIEffect", StopUIEffect);
		L.RegFunction("StopAllUIEffects", StopAllUIEffects);
		L.RegFunction("OnFadeOutFinished", OnFadeOutFinished);
		L.RegFunction("setAlpha", setAlpha);
		L.RegFunction("FadeOut", FadeOut);
		L.RegFunction("DelayFadeOut", DelayFadeOut);
		L.RegFunction("OnFadeInFinished", OnFadeInFinished);
		L.RegFunction("OnMoveFadeInFinished", OnMoveFadeInFinished);
		L.RegFunction("FadeIn", FadeIn);
		L.RegFunction("DelayFadeIn", DelayFadeIn);
		L.RegFunction("DelayMoveFadeIn", DelayMoveFadeIn);
		L.RegFunction("OnMoveFinished", OnMoveFinished);
		L.RegFunction("MoveTo", MoveTo);
		L.RegFunction("MoveFadeIn", MoveFadeIn);
		L.RegFunction("OnMoveFadeOutFinished", OnMoveFadeOutFinished);
		L.RegFunction("MoveFadeOut", MoveFadeOut);
		L.RegFunction("StopAllITweens", StopAllITweens);
		L.RegFunction("FireSliderValueChanged", FireSliderValueChanged);
		L.RegFunction("BindSliderValueChanged", BindSliderValueChanged);
		L.RegFunction("OnTweenComplete", OnTweenComplete);
		L.RegFunction("OnDestroy", OnDestroy);
		L.RegFunction("IsDoingCrack", IsDoingCrack);
		L.RegFunction("DoCrack", DoCrack);
		L.RegVar("this", _this, null);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("mClickSoundOverride", get_mClickSoundOverride, set_mClickSoundOverride);
		L.RegVar("material", get_material, set_material);
		L.RegVar("isSoundDontDestroyOnLoad", get_isSoundDontDestroyOnLoad, set_isSoundDontDestroyOnLoad);
		L.RegVar("isClickSoundEnable", get_isClickSoundEnable, set_isClickSoundEnable);
		L.RegVar("clickSoundOverride", get_clickSoundOverride, set_clickSoundOverride);
		L.RegVar("pointer_position", get_pointer_position, null);
		L.RegVar("pointer_press_position", get_pointer_press_position, null);
		L.RegVar("buttonEnable", get_buttonEnable, set_buttonEnable);
		L.RegVar("buttonImageEnable", null, set_buttonImageEnable);
		L.RegVar("Parent", get_Parent, null);
		L.RegVar("childCount", get_childCount, null);
		L.RegVar("textWidth", get_textWidth, null);
		L.RegVar("text", get_text, set_text);
		L.RegVar("font", get_font, set_font);
		L.RegVar("inputText", get_inputText, set_inputText);
		L.RegVar("inputIndex", get_inputIndex, null);
		L.RegVar("textColor", get_textColor, set_textColor);
		L.RegVar("sprite", null, set_sprite);
		L.RegVar("imageType", null, set_imageType);
		L.RegVar("Sprite", get_Sprite, set_Sprite);
		L.RegVar("materialTexture", get_materialTexture, set_materialTexture);
		L.RegVar("fillMethod", get_fillMethod, set_fillMethod);
		L.RegVar("fillClockwise", get_fillClockwise, set_fillClockwise);
		L.RegVar("fillAmount", get_fillAmount, set_fillAmount);
		L.RegVar("imageColor", get_imageColor, set_imageColor);
		L.RegVar("color", get_color, set_color);
		L.RegVar("layerSortingOrder", get_layerSortingOrder, set_layerSortingOrder);
		L.RegVar("sortingOrder", get_sortingOrder, set_sortingOrder);
		L.RegVar("ToggleValue", get_ToggleValue, set_ToggleValue);
		L.RegVar("Horizontal", get_Horizontal, set_Horizontal);
		L.RegVar("Vertical", get_Vertical, set_Vertical);
		L.RegVar("itemCount", get_itemCount, null);
		L.RegVar("cellSpacing", get_cellSpacing, set_cellSpacing);
		L.RegVar("cellSize", get_cellSize, set_cellSize);
		L.RegVar("alpha", get_alpha, set_alpha);
		L.RegVar("SliderValue", get_SliderValue, set_SliderValue);
		L.RegVar("rectSize", get_rectSize, null);
		L.RegVar("scale", get_scale, set_scale);
		L.RegVar("tweenCallBack", get_tweenCallBack, set_tweenCallBack);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _get_this(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWrapper), typeof(int)))
			{
				UIWrapper obj = (UIWrapper)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				UIWrapper o = obj[arg0];
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWrapper), typeof(string)))
			{
				UIWrapper obj = (UIWrapper)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UIWrapper o = obj[arg0];
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to operator method: UIWrapper.this");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _this(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushvalue(L, 1);
			LuaDLL.tolua_bindthis(L, _get_this, null);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUserData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			object arg0 = ToLua.ToVarObject(L, 2);
			object o = obj.GetUserData(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetUserData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			object arg0 = ToLua.ToVarObject(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			obj.SetUserData(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveUserData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.RemoveUserData(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckET(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			obj.CheckET();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveEventTriggers(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			obj.RemoveEventTriggers();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindETBeginDrag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			System.Action<UnityEngine.GameObject> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.GameObject>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.GameObject>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.GameObject>), func) as System.Action<UnityEngine.GameObject>;
			}

			obj.BindETBeginDrag(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindETEndDrag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			System.Action<UnityEngine.GameObject> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.GameObject>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.GameObject>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.GameObject>), func) as System.Action<UnityEngine.GameObject>;
			}

			obj.BindETEndDrag(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindETDrag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			System.Action<UnityEngine.GameObject,UnityEngine.Vector2> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.GameObject,UnityEngine.Vector2>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.GameObject,UnityEngine.Vector2>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.GameObject,UnityEngine.Vector2>), func) as System.Action<UnityEngine.GameObject,UnityEngine.Vector2>;
			}

			obj.BindETDrag(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindETButtonDown(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			System.Action<UnityEngine.GameObject,int> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.GameObject,int>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.GameObject,int>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.GameObject,int>), func) as System.Action<UnityEngine.GameObject,int>;
			}

			obj.BindETButtonDown(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindETButtonUp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			System.Action<UnityEngine.GameObject> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.GameObject>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.GameObject>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.GameObject>), func) as System.Action<UnityEngine.GameObject>;
			}

			obj.BindETButtonUp(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindETTouchEnter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			System.Action<UnityEngine.GameObject> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.GameObject>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.GameObject>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.GameObject>), func) as System.Action<UnityEngine.GameObject>;
			}

			obj.BindETTouchEnter(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindETTouchExit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			System.Action<UnityEngine.GameObject> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.GameObject>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.GameObject>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.GameObject>), func) as System.Action<UnityEngine.GameObject>;
			}

			obj.BindETTouchExit(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FireButtonClick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			obj.FireButtonClick();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnbindAllButtonClick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			obj.UnbindAllButtonClick();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindButtonClick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			System.Action<UnityEngine.GameObject> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.GameObject>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.GameObject>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.GameObject>), func) as System.Action<UnityEngine.GameObject>;
			}

			obj.BindButtonClick(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindButtonMultipleClick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			System.Action<UnityEngine.GameObject> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.GameObject>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.GameObject>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.GameObject>), func) as System.Action<UnityEngine.GameObject>;
			}

			obj.BindButtonMultipleClick(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindLostFocus(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			System.Action<UnityEngine.GameObject> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.GameObject>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.GameObject>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.GameObject>), func) as System.Action<UnityEngine.GameObject>;
			}

			obj.BindLostFocus(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetNaiveSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			obj.SetNaiveSize();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnbindAllLostFocus(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			obj.UnbindAllLostFocus();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FireLostFocus(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			obj.FireLostFocus();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerClick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnPointerClick(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SimulateButtonClick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			string arg0 = ToLua.CheckString(L, 2);
			obj.SimulateButtonClick(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClickButton(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			obj.ClickButton();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerDown(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnPointerDown(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindButtonDown(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			System.Action<UnityEngine.GameObject> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.GameObject>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.GameObject>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.GameObject>), func) as System.Action<UnityEngine.GameObject>;
			}

			obj.BindButtonDown(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerUp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnPointerUp(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindButtonUp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			System.Action<UnityEngine.GameObject> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.GameObject>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.GameObject>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.GameObject>), func) as System.Action<UnityEngine.GameObject>;
			}

			obj.BindButtonUp(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindButtonLongPressed(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			System.Action<float> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<float>)ToLua.CheckObject(L, 2, typeof(System.Action<float>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<float>), func) as System.Action<float>;
			}

			obj.BindButtonLongPressed(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Item(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWrapper), typeof(int)))
			{
				UIWrapper obj = (UIWrapper)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				UIWrapper o = obj[arg0];
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWrapper), typeof(string)))
			{
				UIWrapper obj = (UIWrapper)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UIWrapper o = obj[arg0];
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWrapper.get_Item");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GOI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UIWrapper o = obj.GOI(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GO(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			string arg0 = ToLua.CheckString(L, 2);
			UIWrapper o = obj.GO(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAsset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Object o = obj.LoadAsset(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GOT(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Transform o = obj.GOT(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clean(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			obj.Clean();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsShow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			bool o = obj.IsShow();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetShow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetShow(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Show(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			obj.Show();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Hide(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			obj.Hide();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowChild(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			string arg0 = ToLua.CheckString(L, 2);
			obj.ShowChild(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HideChild(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			string arg0 = ToLua.CheckString(L, 2);
			obj.HideChild(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsChildShow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			bool o = obj.IsChildShow();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetChildShow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetChildShow(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddChild(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			obj.AddChild(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DOFade(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			obj.DOFade(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAlpha(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.SetAlpha(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveTextEnd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.MoveTextEnd(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindInputFiledValueChanged(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			UnityEngine.Events.UnityAction<string,int> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (UnityEngine.Events.UnityAction<string,int>)ToLua.CheckObject(L, 2, typeof(UnityEngine.Events.UnityAction<string,int>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(UnityEngine.Events.UnityAction<string,int>), func) as UnityEngine.Events.UnityAction<string,int>;
			}

			obj.BindInputFiledValueChanged(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTextColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
			obj.SetTextColor(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			GameResType arg0 = (GameResType)ToLua.CheckObject(L, 2, typeof(GameResType));
			string arg1 = ToLua.CheckString(L, 3);
			UnityEngine.Sprite o = obj.LoadSprite(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAtlas(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			string arg0 = ToLua.CheckString(L, 2);
			Atlas o = obj.LoadAtlas(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAtlasAsync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			string arg0 = ToLua.CheckString(L, 2);
			System.Action<Atlas> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<Atlas>)ToLua.CheckObject(L, 3, typeof(System.Action<Atlas>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<Atlas>), func) as System.Action<Atlas>;
			}

			obj.LoadAtlasAsync(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBlackWhiteMode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetBlackWhiteMode(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetShadow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetShadow(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			obj.Close();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DelayClose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.DelayClose(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FollowTarget(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			obj.FollowTarget(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddLayerSortingOrder(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.AddLayerSortingOrder(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FireToggleValueChanged(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.FireToggleValueChanged(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindToggleValueChanged(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			System.Action<bool> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<bool>)ToLua.CheckObject(L, 2, typeof(System.Action<bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<bool>), func) as System.Action<bool>;
			}

			obj.BindToggleValueChanged(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindScrollRectValueChanged(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			UnityEngine.Events.UnityAction<UnityEngine.Vector2> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (UnityEngine.Events.UnityAction<UnityEngine.Vector2>)ToLua.CheckObject(L, 2, typeof(UnityEngine.Events.UnityAction<UnityEngine.Vector2>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(UnityEngine.Events.UnityAction<UnityEngine.Vector2>), func) as UnityEngine.Events.UnityAction<UnityEngine.Vector2>;
			}

			obj.BindScrollRectValueChanged(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayUIEffect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWrapper), typeof(UnityEngine.GameObject), typeof(string)))
			{
				UIWrapper obj = (UIWrapper)ToLua.ToObject(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				obj.PlayUIEffect(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UIWrapper), typeof(UnityEngine.GameObject), typeof(string), typeof(float)))
			{
				UIWrapper obj = (UIWrapper)ToLua.ToObject(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				obj.PlayUIEffect(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 6 && TypeChecker.CheckTypes(L, 1, typeof(UIWrapper), typeof(UnityEngine.GameObject), typeof(string), typeof(float), typeof(LuaInterface.LuaFunction), typeof(bool)))
			{
				UIWrapper obj = (UIWrapper)ToLua.ToObject(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				LuaFunction arg3 = ToLua.ToLuaFunction(L, 5);
				bool arg4 = LuaDLL.lua_toboolean(L, 6);
				obj.PlayUIEffect(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 8 && TypeChecker.CheckTypes(L, 1, typeof(UIWrapper), typeof(UnityEngine.GameObject), typeof(UnityEngine.GameObject), typeof(float), typeof(LuaInterface.LuaFunction), typeof(bool), typeof(bool), typeof(UIWrapper.UIEffectAddType)))
			{
				UIWrapper obj = (UIWrapper)ToLua.ToObject(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 2);
				UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.ToObject(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				LuaFunction arg3 = ToLua.ToLuaFunction(L, 5);
				bool arg4 = LuaDLL.lua_toboolean(L, 6);
				bool arg5 = LuaDLL.lua_toboolean(L, 7);
				UIWrapper.UIEffectAddType arg6 = (UIWrapper.UIEffectAddType)ToLua.ToObject(L, 8);
				obj.PlayUIEffect(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				return 0;
			}
			else if (count == 8 && TypeChecker.CheckTypes(L, 1, typeof(UIWrapper), typeof(UnityEngine.GameObject), typeof(string), typeof(float), typeof(LuaInterface.LuaFunction), typeof(bool), typeof(bool), typeof(UIWrapper.UIEffectAddType)))
			{
				UIWrapper obj = (UIWrapper)ToLua.ToObject(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				LuaFunction arg3 = ToLua.ToLuaFunction(L, 5);
				bool arg4 = LuaDLL.lua_toboolean(L, 6);
				bool arg5 = LuaDLL.lua_toboolean(L, 7);
				UIWrapper.UIEffectAddType arg6 = (UIWrapper.UIEffectAddType)ToLua.ToObject(L, 8);
				obj.PlayUIEffect(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWrapper.PlayUIEffect");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayUIEffectForever(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			string arg1 = ToLua.CheckString(L, 3);
			obj.PlayUIEffectForever(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadUIEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			string arg1 = ToLua.CheckString(L, 3);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
			bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
			UnityEngine.GameObject o = obj.LoadUIEffect(arg0, arg1, arg2, arg3);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopUIEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			string arg0 = ToLua.CheckString(L, 2);
			obj.StopUIEffect(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopAllUIEffects(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			obj.StopAllUIEffects();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnFadeOutFinished(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.OnFadeOutFinished(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setAlpha(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.setAlpha(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FadeOut(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 3);
			obj.FadeOut(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DelayFadeOut(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			LuaFunction arg2 = ToLua.CheckLuaFunction(L, 4);
			obj.DelayFadeOut(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnFadeInFinished(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.OnFadeInFinished(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnMoveFadeInFinished(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.OnMoveFadeInFinished(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FadeIn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 3);
			obj.FadeIn(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DelayFadeIn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			LuaFunction arg2 = ToLua.CheckLuaFunction(L, 4);
			obj.DelayFadeIn(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DelayMoveFadeIn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			LuaFunction arg3 = ToLua.CheckLuaFunction(L, 5);
			obj.DelayMoveFadeIn(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnMoveFinished(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.OnMoveFinished(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			LuaFunction arg2 = ToLua.CheckLuaFunction(L, 4);
			obj.MoveTo(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveFadeIn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			LuaFunction arg2 = ToLua.CheckLuaFunction(L, 4);
			obj.MoveFadeIn(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnMoveFadeOutFinished(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.OnMoveFadeOutFinished(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveFadeOut(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			LuaFunction arg2 = ToLua.CheckLuaFunction(L, 4);
			obj.MoveFadeOut(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopAllITweens(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			obj.StopAllITweens();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FireSliderValueChanged(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.FireSliderValueChanged(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindSliderValueChanged(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			System.Action<float> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<float>)ToLua.CheckObject(L, 2, typeof(System.Action<float>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<float>), func) as System.Action<float>;
			}

			obj.BindSliderValueChanged(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnTweenComplete(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.OnTweenComplete(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDestroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			obj.OnDestroy();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsDoingCrack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			bool o = obj.IsDoingCrack();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoCrack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			string arg0 = ToLua.CheckString(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 6);
			LuaFunction arg5 = ToLua.CheckLuaFunction(L, 7);
			obj.DoCrack(arg0, arg1, arg2, arg3, arg4, arg5);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mClickSoundOverride(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			string ret = obj.mClickSoundOverride;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mClickSoundOverride on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_material(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			UnityEngine.Material ret = obj.material;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index material on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isSoundDontDestroyOnLoad(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			bool ret = obj.isSoundDontDestroyOnLoad;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isSoundDontDestroyOnLoad on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isClickSoundEnable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			bool ret = obj.isClickSoundEnable;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isClickSoundEnable on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_clickSoundOverride(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			string ret = obj.clickSoundOverride;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index clickSoundOverride on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pointer_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			UnityEngine.Vector2 ret = obj.pointer_position;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pointer_position on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pointer_press_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			UnityEngine.Vector2 ret = obj.pointer_press_position;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pointer_press_position on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_buttonEnable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			bool ret = obj.buttonEnable;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index buttonEnable on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Parent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			UIWrapper ret = obj.Parent;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Parent on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_childCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			int ret = obj.childCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index childCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_textWidth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			float ret = obj.textWidth;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index textWidth on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_text(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			string ret = obj.text;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index text on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_font(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			string ret = obj.font;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index font on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_inputText(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			string ret = obj.inputText;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index inputText on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_inputIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			int ret = obj.inputIndex;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index inputIndex on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_textColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			UnityEngine.Color ret = obj.textColor;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index textColor on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Sprite(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			UnityEngine.Sprite ret = obj.Sprite;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Sprite on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_materialTexture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			UnityEngine.Texture ret = obj.materialTexture;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index materialTexture on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_fillMethod(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			UnityEngine.UI.Image.FillMethod ret = obj.fillMethod;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index fillMethod on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_fillClockwise(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			bool ret = obj.fillClockwise;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index fillClockwise on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_fillAmount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			float ret = obj.fillAmount;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index fillAmount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_imageColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			UnityEngine.Color ret = obj.imageColor;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index imageColor on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_color(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			UnityEngine.Color ret = obj.color;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index color on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_layerSortingOrder(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			int ret = obj.layerSortingOrder;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index layerSortingOrder on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sortingOrder(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			int ret = obj.sortingOrder;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index sortingOrder on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ToggleValue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			bool ret = obj.ToggleValue;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ToggleValue on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Horizontal(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			bool ret = obj.Horizontal;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Horizontal on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Vertical(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			bool ret = obj.Vertical;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Vertical on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_itemCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			int ret = obj.itemCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index itemCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cellSpacing(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			UnityEngine.Vector2 ret = obj.cellSpacing;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index cellSpacing on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cellSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			UnityEngine.Vector2 ret = obj.cellSize;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index cellSize on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_alpha(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			float ret = obj.alpha;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index alpha on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SliderValue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			float ret = obj.SliderValue;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SliderValue on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rectSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			UnityEngine.Vector2 ret = obj.rectSize;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index rectSize on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_scale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			UnityEngine.Vector3 ret = obj.scale;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index scale on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_tweenCallBack(IntPtr L)
	{
		ToLua.Push(L, new EventObject("UIWrapper.tweenCallBack"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mClickSoundOverride(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.mClickSoundOverride = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mClickSoundOverride on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_material(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			UnityEngine.Material arg0 = (UnityEngine.Material)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Material));
			obj.material = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index material on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isSoundDontDestroyOnLoad(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isSoundDontDestroyOnLoad = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isSoundDontDestroyOnLoad on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isClickSoundEnable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isClickSoundEnable = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isClickSoundEnable on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_clickSoundOverride(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.clickSoundOverride = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index clickSoundOverride on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_buttonEnable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.buttonEnable = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index buttonEnable on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_buttonImageEnable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.buttonImageEnable = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index buttonImageEnable on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_text(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.text = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index text on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_font(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.font = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index font on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_inputText(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.inputText = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index inputText on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_textColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.textColor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index textColor on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sprite(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.sprite = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index sprite on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_imageType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.imageType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index imageType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Sprite(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			UnityEngine.Sprite arg0 = (UnityEngine.Sprite)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Sprite));
			obj.Sprite = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Sprite on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_materialTexture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			UnityEngine.Texture arg0 = (UnityEngine.Texture)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Texture));
			obj.materialTexture = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index materialTexture on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_fillMethod(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			UnityEngine.UI.Image.FillMethod arg0 = (UnityEngine.UI.Image.FillMethod)ToLua.CheckObject(L, 2, typeof(UnityEngine.UI.Image.FillMethod));
			obj.fillMethod = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index fillMethod on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_fillClockwise(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.fillClockwise = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index fillClockwise on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_fillAmount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.fillAmount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index fillAmount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_imageColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.imageColor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index imageColor on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_color(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.color = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index color on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_layerSortingOrder(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.layerSortingOrder = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index layerSortingOrder on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sortingOrder(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.sortingOrder = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index sortingOrder on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ToggleValue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ToggleValue = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ToggleValue on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Horizontal(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Horizontal = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Horizontal on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Vertical(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Vertical = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Vertical on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_cellSpacing(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.cellSpacing = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index cellSpacing on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_cellSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.cellSize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index cellSize on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_alpha(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.alpha = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index alpha on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SliderValue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.SliderValue = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SliderValue on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_scale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapper obj = (UIWrapper)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.scale = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index scale on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_tweenCallBack(IntPtr L)
	{
		try
		{
			UIWrapper obj = (UIWrapper)ToLua.CheckObject(L, 1, typeof(UIWrapper));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'UIWrapper.tweenCallBack' can only appear on the left hand side of += or -= when used outside of the type 'UIWrapper'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<object> ev = (System.Action<object>)DelegateFactory.CreateDelegate(typeof(System.Action<object>), arg0.func);
				obj.tweenCallBack += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<object> ev = (System.Action<object>)LuaMisc.GetEventHandler(obj, typeof(UIWrapper), "tweenCallBack");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.Action<object>)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.tweenCallBack -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

