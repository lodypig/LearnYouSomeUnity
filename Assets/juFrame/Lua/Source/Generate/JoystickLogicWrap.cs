//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class JoystickLogicWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(JoystickLogic), typeof(UISingleton<JoystickLogic>));
		L.RegFunction("IsJoystick", IsJoystick);
		L.RegFunction("GetJoystickDirection", GetJoystickDirection);
		L.RegFunction("ResetEvent", ResetEvent);
		L.RegFunction("OnDestroy", OnDestroy);
		L.RegFunction("SetJoystickPos", SetJoystickPos);
		L.RegFunction("FireJoystick", FireJoystick);
		L.RegFunction("BeginJoystick", BeginJoystick);
		L.RegFunction("EndJoystick", EndJoystick);
		L.RegFunction("IncreaseDelta", IncreaseDelta);
		L.RegFunction("UpdateJoystick", UpdateJoystick);
		L.RegFunction("OnButtonDown", OnButtonDown);
		L.RegFunction("OnButtonUp", OnButtonUp);
		L.RegFunction("OnDragBegin", OnDragBegin);
		L.RegFunction("OnDragMove", OnDragMove);
		L.RegFunction("OnDragEnd", OnDragEnd);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("mJoystickDirection", get_mJoystickDirection, set_mJoystickDirection);
		L.RegVar("Joystick", get_Joystick, set_Joystick);
		L.RegVar("JoystickArea", get_JoystickArea, set_JoystickArea);
		L.RegVar("JoystickTouch", get_JoystickTouch, set_JoystickTouch);
		L.RegVar("region", get_region, set_region);
		L.RegVar("areaChangeColor", get_areaChangeColor, set_areaChangeColor);
		L.RegVar("joysticking", get_joysticking, set_joysticking);
		L.RegVar("keyDelta", get_keyDelta, set_keyDelta);
		L.RegVar("simulate", get_simulate, set_simulate);
		L.RegVar("onBeginJoystick", get_onBeginJoystick, set_onBeginJoystick);
		L.RegVar("onEndJoystick", get_onEndJoystick, set_onEndJoystick);
		L.RegVar("onUpdateJoystick", get_onUpdateJoystick, set_onUpdateJoystick);
		L.RegVar("deltaPos", get_deltaPos, set_deltaPos);
		L.RegVar("radius", get_radius, set_radius);
		L.RegVar("recoverSpeed", get_recoverSpeed, set_recoverSpeed);
		L.RegVar("recoverStartPos", get_recoverStartPos, set_recoverStartPos);
		L.RegVar("offsetRadio", get_offsetRadio, set_offsetRadio);
		L.RegVar("IsJoysticking", get_IsJoysticking, null);
		L.RegVar("OnJoystick", get_OnJoystick, set_OnJoystick);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsJoystick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = JoystickLogic.IsJoystick();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetJoystickDirection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UnityEngine.Vector2 o = JoystickLogic.GetJoystickDirection();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			JoystickLogic.ResetEvent();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDestroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			JoystickLogic obj = (JoystickLogic)ToLua.CheckObject(L, 1, typeof(JoystickLogic));
			obj.OnDestroy();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetJoystickPos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			JoystickLogic obj = (JoystickLogic)ToLua.CheckObject(L, 1, typeof(JoystickLogic));
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.SetJoystickPos(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FireJoystick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			JoystickLogic obj = (JoystickLogic)ToLua.CheckObject(L, 1, typeof(JoystickLogic));
			obj.FireJoystick();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginJoystick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			JoystickLogic obj = (JoystickLogic)ToLua.CheckObject(L, 1, typeof(JoystickLogic));
			obj.BeginJoystick();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndJoystick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			JoystickLogic obj = (JoystickLogic)ToLua.CheckObject(L, 1, typeof(JoystickLogic));
			obj.EndJoystick();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IncreaseDelta(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			JoystickLogic obj = (JoystickLogic)ToLua.CheckObject(L, 1, typeof(JoystickLogic));
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.IncreaseDelta(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateJoystick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			JoystickLogic obj = (JoystickLogic)ToLua.CheckObject(L, 1, typeof(JoystickLogic));
			obj.UpdateJoystick();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnButtonDown(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			JoystickLogic obj = (JoystickLogic)ToLua.CheckObject(L, 1, typeof(JoystickLogic));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.OnButtonDown(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnButtonUp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			JoystickLogic obj = (JoystickLogic)ToLua.CheckObject(L, 1, typeof(JoystickLogic));
			obj.OnButtonUp();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDragBegin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			JoystickLogic obj = (JoystickLogic)ToLua.CheckObject(L, 1, typeof(JoystickLogic));
			obj.OnDragBegin();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDragMove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			JoystickLogic obj = (JoystickLogic)ToLua.CheckObject(L, 1, typeof(JoystickLogic));
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.OnDragMove(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDragEnd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			JoystickLogic obj = (JoystickLogic)ToLua.CheckObject(L, 1, typeof(JoystickLogic));
			obj.OnDragEnd();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mJoystickDirection(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			UnityEngine.Vector2 ret = obj.mJoystickDirection;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mJoystickDirection on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Joystick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			UIWrapper ret = obj.Joystick;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Joystick on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_JoystickArea(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			UIWrapper ret = obj.JoystickArea;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index JoystickArea on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_JoystickTouch(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			UIWrapper ret = obj.JoystickTouch;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index JoystickTouch on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_region(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			float ret = obj.region;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index region on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_areaChangeColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			UnityEngine.Color ret = obj.areaChangeColor;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index areaChangeColor on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_joysticking(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			bool ret = obj.joysticking;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index joysticking on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_keyDelta(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			UnityEngine.Vector2 ret = obj.keyDelta;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index keyDelta on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_simulate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			bool ret = obj.simulate;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index simulate on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onBeginJoystick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			LuaInterface.LuaFunction ret = obj.onBeginJoystick;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onBeginJoystick on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onEndJoystick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			LuaInterface.LuaFunction ret = obj.onEndJoystick;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onEndJoystick on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onUpdateJoystick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			LuaInterface.LuaFunction ret = obj.onUpdateJoystick;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onUpdateJoystick on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_deltaPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			UnityEngine.Vector2 ret = obj.deltaPos;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index deltaPos on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_radius(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			float ret = obj.radius;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index radius on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_recoverSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			float ret = obj.recoverSpeed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index recoverSpeed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_recoverStartPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			UnityEngine.Vector2 ret = obj.recoverStartPos;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index recoverStartPos on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_offsetRadio(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			float ret = obj.offsetRadio;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index offsetRadio on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsJoysticking(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			bool ret = obj.IsJoysticking;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsJoysticking on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnJoystick(IntPtr L)
	{
		ToLua.Push(L, new EventObject("JoystickLogic.OnJoystick"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mJoystickDirection(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.mJoystickDirection = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mJoystickDirection on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Joystick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			UIWrapper arg0 = (UIWrapper)ToLua.CheckUnityObject(L, 2, typeof(UIWrapper));
			obj.Joystick = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Joystick on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_JoystickArea(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			UIWrapper arg0 = (UIWrapper)ToLua.CheckUnityObject(L, 2, typeof(UIWrapper));
			obj.JoystickArea = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index JoystickArea on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_JoystickTouch(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			UIWrapper arg0 = (UIWrapper)ToLua.CheckUnityObject(L, 2, typeof(UIWrapper));
			obj.JoystickTouch = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index JoystickTouch on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_region(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.region = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index region on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_areaChangeColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.areaChangeColor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index areaChangeColor on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_joysticking(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.joysticking = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index joysticking on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_keyDelta(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.keyDelta = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index keyDelta on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_simulate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.simulate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index simulate on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onBeginJoystick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.onBeginJoystick = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onBeginJoystick on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onEndJoystick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.onEndJoystick = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onEndJoystick on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onUpdateJoystick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.onUpdateJoystick = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onUpdateJoystick on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_deltaPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.deltaPos = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index deltaPos on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_radius(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.radius = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index radius on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_recoverSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.recoverSpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index recoverSpeed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_recoverStartPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.recoverStartPos = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index recoverStartPos on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_offsetRadio(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			JoystickLogic obj = (JoystickLogic)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.offsetRadio = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index offsetRadio on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnJoystick(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'JoystickLogic.OnJoystick' can only appear on the left hand side of += or -= when used outside of the type 'JoystickLogic'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<UnityEngine.Vector2> ev = (System.Action<UnityEngine.Vector2>)DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Vector2>), arg0.func);
				JoystickLogic.OnJoystick += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<UnityEngine.Vector2> ev = (System.Action<UnityEngine.Vector2>)LuaMisc.GetEventHandler(null, typeof(JoystickLogic), "OnJoystick");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.Action<UnityEngine.Vector2>)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						JoystickLogic.OnJoystick -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

