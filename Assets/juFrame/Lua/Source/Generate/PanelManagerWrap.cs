//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PanelManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PanelManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Start", Start);
		L.RegFunction("ClearPanel", ClearPanel);
		L.RegFunction("CreatePanel", CreatePanel);
		L.RegFunction("CreateUnderPanel", CreateUnderPanel);
		L.RegFunction("CreateConstPanel", CreateConstPanel);
		L.RegFunction("CreateUpdateScene", CreateUpdateScene);
		L.RegFunction("CreateLogin", CreateLogin);
		L.RegFunction("CreateFullScreenPanel", CreateFullScreenPanel);
		L.RegFunction("CreateFloat", CreateFloat);
		L.RegFunction("SetText", SetText);
		L.RegFunction("SetAlpha", SetAlpha);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Instance", get_Instance, set_Instance);
		L.RegVar("UI", get_UI, null);
		L.RegVar("UIRoot", get_UIRoot, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Start(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PanelManager obj = (PanelManager)ToLua.CheckObject(L, 1, typeof(PanelManager));
			obj.Start();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearPanel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PanelManager obj = (PanelManager)ToLua.CheckObject(L, 1, typeof(PanelManager));
			obj.ClearPanel();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreatePanel(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(PanelManager), typeof(string)))
			{
				PanelManager obj = (PanelManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.CreatePanel(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(PanelManager), typeof(string), typeof(WindowLayer)))
			{
				PanelManager obj = (PanelManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				WindowLayer arg1 = (WindowLayer)ToLua.ToObject(L, 3);
				obj.CreatePanel(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(PanelManager), typeof(string), typeof(object)))
			{
				PanelManager obj = (PanelManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				obj.CreatePanel(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(PanelManager), typeof(string), typeof(UIExtendType), typeof(object)))
			{
				PanelManager obj = (PanelManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UIExtendType arg1 = (UIExtendType)ToLua.ToObject(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				obj.CreatePanel(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(PanelManager), typeof(string), typeof(UIExtendType), typeof(UIOpenType), typeof(object)))
			{
				PanelManager obj = (PanelManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UIExtendType arg1 = (UIExtendType)ToLua.ToObject(L, 3);
				UIOpenType arg2 = (UIOpenType)ToLua.ToObject(L, 4);
				object arg3 = ToLua.ToVarObject(L, 5);
				obj.CreatePanel(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 8 && TypeChecker.CheckTypes(L, 1, typeof(PanelManager), typeof(string), typeof(WindowLayer), typeof(UIExtendType), typeof(UIOpenType), typeof(LuaInterface.LuaFunction), typeof(object), typeof(int)))
			{
				PanelManager obj = (PanelManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				WindowLayer arg1 = (WindowLayer)ToLua.ToObject(L, 3);
				UIExtendType arg2 = (UIExtendType)ToLua.ToObject(L, 4);
				UIOpenType arg3 = (UIOpenType)ToLua.ToObject(L, 5);
				LuaFunction arg4 = ToLua.ToLuaFunction(L, 6);
				object arg5 = ToLua.ToVarObject(L, 7);
				int arg6 = (int)LuaDLL.lua_tonumber(L, 8);
				obj.CreatePanel(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PanelManager.CreatePanel");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateUnderPanel(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(PanelManager), typeof(string), typeof(UIExtendType), typeof(object)))
			{
				PanelManager obj = (PanelManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UIExtendType arg1 = (UIExtendType)ToLua.ToObject(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				obj.CreateUnderPanel(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(PanelManager), typeof(string), typeof(UIExtendType), typeof(object), typeof(int)))
			{
				PanelManager obj = (PanelManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UIExtendType arg1 = (UIExtendType)ToLua.ToObject(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 5);
				obj.CreateUnderPanel(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PanelManager.CreateUnderPanel");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateConstPanel(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(PanelManager), typeof(string), typeof(bool)))
			{
				PanelManager obj = (PanelManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				obj.CreateConstPanel(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(PanelManager), typeof(string), typeof(bool), typeof(bool)))
			{
				PanelManager obj = (PanelManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				obj.CreateConstPanel(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(PanelManager), typeof(string), typeof(UIExtendType), typeof(object)))
			{
				PanelManager obj = (PanelManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UIExtendType arg1 = (UIExtendType)ToLua.ToObject(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				obj.CreateConstPanel(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(PanelManager), typeof(string), typeof(UIExtendType), typeof(object), typeof(int)))
			{
				PanelManager obj = (PanelManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UIExtendType arg1 = (UIExtendType)ToLua.ToObject(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 5);
				obj.CreateConstPanel(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 6 && TypeChecker.CheckTypes(L, 1, typeof(PanelManager), typeof(string), typeof(UIExtendType), typeof(LuaInterface.LuaFunction), typeof(object), typeof(bool)))
			{
				PanelManager obj = (PanelManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UIExtendType arg1 = (UIExtendType)ToLua.ToObject(L, 3);
				LuaFunction arg2 = ToLua.ToLuaFunction(L, 4);
				object arg3 = ToLua.ToVarObject(L, 5);
				bool arg4 = LuaDLL.lua_toboolean(L, 6);
				obj.CreateConstPanel(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 6 && TypeChecker.CheckTypes(L, 1, typeof(PanelManager), typeof(string), typeof(UIExtendType), typeof(object), typeof(UnityEngine.UI.CanvasScaler.ScreenMatchMode), typeof(float)))
			{
				PanelManager obj = (PanelManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UIExtendType arg1 = (UIExtendType)ToLua.ToObject(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				UnityEngine.UI.CanvasScaler.ScreenMatchMode arg3 = (UnityEngine.UI.CanvasScaler.ScreenMatchMode)ToLua.ToObject(L, 5);
				float arg4 = (float)LuaDLL.lua_tonumber(L, 6);
				obj.CreateConstPanel(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 10 && TypeChecker.CheckTypes(L, 1, typeof(PanelManager), typeof(string), typeof(UIExtendType), typeof(System.Action<UnityEngine.GameObject>), typeof(LuaInterface.LuaFunction), typeof(object), typeof(bool), typeof(UILayerType), typeof(bool), typeof(int)))
			{
				PanelManager obj = (PanelManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UIExtendType arg1 = (UIExtendType)ToLua.ToObject(L, 3);
				System.Action<UnityEngine.GameObject> arg2 = null;
				LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

				if (funcType4 != LuaTypes.LUA_TFUNCTION)
				{
					 arg2 = (System.Action<UnityEngine.GameObject>)ToLua.ToObject(L, 4);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 4);
					arg2 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.GameObject>), func) as System.Action<UnityEngine.GameObject>;
				}

				LuaFunction arg3 = ToLua.ToLuaFunction(L, 5);
				object arg4 = ToLua.ToVarObject(L, 6);
				bool arg5 = LuaDLL.lua_toboolean(L, 7);
				UILayerType arg6 = (UILayerType)ToLua.ToObject(L, 8);
				bool arg7 = LuaDLL.lua_toboolean(L, 9);
				int arg8 = (int)LuaDLL.lua_tonumber(L, 10);
				obj.CreateConstPanel(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PanelManager.CreateConstPanel");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateUpdateScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PanelManager obj = (PanelManager)ToLua.CheckObject(L, 1, typeof(PanelManager));
			UpdateScene o = obj.CreateUpdateScene();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateLogin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PanelManager obj = (PanelManager)ToLua.CheckObject(L, 1, typeof(PanelManager));
			obj.CreateLogin();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateFullScreenPanel(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(PanelManager), typeof(string)))
			{
				PanelManager obj = (PanelManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.CreateFullScreenPanel(arg0);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(PanelManager), typeof(string), typeof(LuaInterface.LuaFunction), typeof(object)))
			{
				PanelManager obj = (PanelManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				obj.CreateFullScreenPanel(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(PanelManager), typeof(string), typeof(UIExtendType), typeof(LuaInterface.LuaFunction), typeof(object)))
			{
				PanelManager obj = (PanelManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UIExtendType arg1 = (UIExtendType)ToLua.ToObject(L, 3);
				LuaFunction arg2 = ToLua.ToLuaFunction(L, 4);
				object arg3 = ToLua.ToVarObject(L, 5);
				obj.CreateFullScreenPanel(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PanelManager.CreateFullScreenPanel");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PanelManager obj = (PanelManager)ToLua.CheckObject(L, 1, typeof(PanelManager));
			string arg0 = ToLua.CheckString(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			obj.CreateFloat(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PanelManager obj = (PanelManager)ToLua.CheckObject(L, 1, typeof(PanelManager));
			UnityEngine.Component arg0 = (UnityEngine.Component)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Component));
			string arg1 = ToLua.CheckString(L, 3);
			obj.SetText(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAlpha(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PanelManager obj = (PanelManager)ToLua.CheckObject(L, 1, typeof(PanelManager));
			UnityEngine.Component arg0 = (UnityEngine.Component)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Component));
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.SetAlpha(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, PanelManager.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UI(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PanelManager obj = (PanelManager)o;
			UIManager ret = obj.UI;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UI on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UIRoot(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PanelManager obj = (PanelManager)o;
			UnityEngine.Transform ret = obj.UIRoot;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UIRoot on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Instance(IntPtr L)
	{
		try
		{
			PanelManager arg0 = (PanelManager)ToLua.CheckUnityObject(L, 2, typeof(PanelManager));
			PanelManager.Instance = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

