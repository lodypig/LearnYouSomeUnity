//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class uFacadeUtilityWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(uFacadeUtility), typeof(System.Object));
		L.RegFunction("GetCaller", GetCaller);
		L.RegFunction("GetLuaStack", GetLuaStack);
		L.RegFunction("PauseGame", PauseGame);
		L.RegFunction("ResumeGame", ResumeGame);
		L.RegFunction("SendStopMoveMsg", SendStopMoveMsg);
		L.RegFunction("SyncStartMoveDeduce", SyncStartMoveDeduce);
		L.RegFunction("SyncStartMove", SyncStartMove);
		L.RegFunction("SyncStopMove", SyncStopMove);
		L.RegFunction("SyncCastSkill", SyncCastSkill);
		L.RegFunction("StartSkillButtonCd", StartSkillButtonCd);
		L.RegFunction("ShowSelectEffect", ShowSelectEffect);
		L.RegFunction("ShakeMainCamera", ShakeMainCamera);
		L.RegFunction("ShowClickMoveEffect", ShowClickMoveEffect);
		L.RegFunction("GetAvatarTitle", GetAvatarTitle);
		L.RegFunction("CreateTitle", CreateTitle);
		L.RegFunction("DestroyDropItem", DestroyDropItem);
		L.RegFunction("ShowAvatarTitle", ShowAvatarTitle);
		L.RegFunction("ShowDropItemTitle", ShowDropItemTitle);
		L.RegFunction("CreateDropItemFromPrefab", CreateDropItemFromPrefab);
		L.RegFunction("CreateDropItemFromTexture", CreateDropItemFromTexture);
		L.RegFunction("OnAvatarCreateFinished", OnAvatarCreateFinished);
		L.RegFunction("CreateOtherPlayer", CreateOtherPlayer);
		L.RegFunction("CreatePlayer", CreatePlayer);
		L.RegFunction("CreateOperateAvatar", CreateOperateAvatar);
		L.RegFunction("CreateAvatar", CreateAvatar);
		L.RegFunction("CreateModel", CreateModel);
		L.RegFunction("CanRouteTo", CanRouteTo);
		L.RegFunction("GetClosestPositionOnSegment", GetClosestPositionOnSegment);
		L.RegFunction("CalcTeleportPath", CalcTeleportPath);
		L.RegFunction("ClearGizmosPath", ClearGizmosPath);
		L.RegFunction("LoadGizmosPath", LoadGizmosPath);
		L.RegFunction("CalcChasePath", CalcChasePath);
		L.RegFunction("CalcPath", CalcPath);
		L.RegFunction("CalcAutoFightReturnPath", CalcAutoFightReturnPath);
		L.RegFunction("CalcRaycastPath", CalcRaycastPath);
		L.RegFunction("PlayMusic", PlayMusic);
		L.RegFunction("CreateLogin", CreateLogin);
		L.RegFunction("ReturnToSelectRoleUI", ReturnToSelectRoleUI);
		L.RegFunction("ReturnToLoginScene", ReturnToLoginScene);
		L.RegFunction("PlaySound", PlaySound);
		L.RegFunction("PlaySoundDontDestroyOnLoad", PlaySoundDontDestroyOnLoad);
		L.RegFunction("GetAreaFootstep", GetAreaFootstep);
		L.RegFunction("PlayState", PlayState);
		L.RegFunction("IsCurrentStateOf", IsCurrentStateOf);
		L.RegFunction("SetStateSpeed", SetStateSpeed);
		L.RegFunction("DestroyAllAvatars", DestroyAllAvatars);
		L.RegFunction("DestroyAvatarImmediate", DestroyAvatarImmediate);
		L.RegFunction("DestroyAvatar", DestroyAvatar);
		L.RegFunction("CreateLoadingUI", CreateLoadingUI);
		L.RegFunction("DestroyLoadingUI", DestroyLoadingUI);
		L.RegFunction("LoadLoginScene", LoadLoginScene);
		L.RegFunction("FinishLoadingScene", FinishLoadingScene);
		L.RegFunction("LoadScene", LoadScene);
		L.RegFunction("ShowScene", ShowScene);
		L.RegFunction("FloatText", FloatText);
		L.RegFunction("RemoveBuff", RemoveBuff);
		L.RegFunction("PlayBuffEffect", PlayBuffEffect);
		L.RegFunction("DestroyDropItemEffects", DestroyDropItemEffects);
		L.RegFunction("PlayDropItemEffect", PlayDropItemEffect);
		L.RegFunction("PlayPositionEffect", PlayPositionEffect);
		L.RegFunction("PlayBulletTraceEffect", PlayBulletTraceEffect);
		L.RegFunction("_GetBindPosTransform", _GetBindPosTransform);
		L.RegFunction("PlayFollowEffect", PlayFollowEffect);
		L.RegFunction("_PlayFollowEffect", _PlayFollowEffect);
		L.RegFunction("PlayStaticEffect", PlayStaticEffect);
		L.RegFunction("_PlayStaticEffect", _PlayStaticEffect);
		L.RegFunction("PlayBillboardEffect", PlayBillboardEffect);
		L.RegFunction("PlayPlaceEffect", PlayPlaceEffect);
		L.RegFunction("PlayLineBulletEffect", PlayLineBulletEffect);
		L.RegFunction("_PlayBulletEffect_Line", _PlayBulletEffect_Line);
		L.RegFunction("PlayRayBulletEffect", PlayRayBulletEffect);
		L.RegFunction("_PlayBulletEffect_Ray", _PlayBulletEffect_Ray);
		L.RegFunction("UpdateJoystickRun", UpdateJoystickRun);
		L.RegFunction("_PlayPlaceEffect", _PlayPlaceEffect);
		L.RegFunction("PlayLighteningEffect", PlayLighteningEffect);
		L.RegFunction("_PlayLighteningEffect", _PlayLighteningEffect);
		L.RegFunction("AdjustTitleHeight", AdjustTitleHeight);
		L.RegFunction("AddBoxCollider", AddBoxCollider);
		L.RegFunction("PutOnWeapon", PutOnWeapon);
		L.RegFunction("PutOnSuit", PutOnSuit);
		L.RegFunction("SetAvatarLayer", SetAvatarLayer);
		L.RegFunction("CallLuaFunctionArg0", CallLuaFunctionArg0);
		L.RegFunction("CallLuaFunctionArgLuaTable", CallLuaFunctionArgLuaTable);
		L.RegFunction("CallLuaFunctionArgNum", CallLuaFunctionArgNum);
		L.RegFunction("CallLuaFunctionArgStr", CallLuaFunctionArgStr);
		L.RegFunction("PutonWeapon", PutonWeapon);
		L.RegFunction("RideHorse", RideHorse);
		L.RegFunction("UnRideHorse", UnRideHorse);
		L.RegFunction("HorseAnimatorPlay", HorseAnimatorPlay);
		L.RegFunction("LoadHorse", LoadHorse);
		L.RegFunction("UpdateHorseEffect", UpdateHorseEffect);
		L.RegFunction("UpdateHorseEffectById", UpdateHorseEffectById);
		L.RegFunction("SetDropItemPos", SetDropItemPos);
		L.RegFunction("ResetSync", ResetSync);
		L.RegFunction("GetAnimatorFloat", GetAnimatorFloat);
		L.RegFunction("SetAnimatorFloat", SetAnimatorFloat);
		L.RegFunction("SetAvatarPosAndDir", SetAvatarPosAndDir);
		L.RegFunction("SetAvatarPos", SetAvatarPos);
		L.RegFunction("SetAvatarDir", SetAvatarDir);
		L.RegFunction("RotateToPos", RotateToPos);
		L.RegFunction("SetAvatarScale", SetAvatarScale);
		L.RegFunction("ShowMesh", ShowMesh);
		L.RegFunction("Tremble", Tremble);
		L.RegFunction("ActiveShader", ActiveShader);
		L.RegFunction("FlashWhite", FlashWhite);
		L.RegFunction("PlayWarnEffect", PlayWarnEffect);
		L.RegFunction("CommitGizmosPath", CommitGizmosPath);
		L.RegFunction("JumpState", JumpState);
		L.RegFunction("ShowRebirthUI", ShowRebirthUI);
		L.RegFunction("SetDrawUnit", SetDrawUnit);
		L.RegFunction("GeneratePath", GeneratePath);
		L.RegFunction("ClearPath", ClearPath);
		L.RegFunction("ClearPathDrawer", ClearPathDrawer);
		L.RegFunction("CreateMaterial", CreateMaterial);
		L.RegFunction("SetDeadGauss", SetDeadGauss);
		L.RegFunction("SetAvatarVisible", SetAvatarVisible);
		L.RegFunction("AddFollowEffect", AddFollowEffect);
		L.RegFunction("SavePlayerPrefs", SavePlayerPrefs);
		L.RegFunction("HasPlayerPrefs", HasPlayerPrefs);
		L.RegFunction("GetPlayerPrefs", GetPlayerPrefs);
		L.RegFunction("SetMusicMute", SetMusicMute);
		L.RegFunction("SetSoundMute", SetSoundMute);
		L.RegFunction("SetSyncWindow", SetSyncWindow);
		L.RegFunction("AddMask", AddMask);
		L.RegFunction("RemoveMask", RemoveMask);
		L.RegFunction("SetLayer", SetLayer);
		L.RegFunction("CreateUI", CreateUI);
		L.RegFunction("GetShowLogin", GetShowLogin);
		L.RegFunction("SetShowLogin", SetShowLogin);
		L.RegFunction("EnablePlayerAudioListener", EnablePlayerAudioListener);
		L.RegFunction("DisablePlayerAudioListener", DisablePlayerAudioListener);
		L.RegFunction("EnableMainCameraAudioListener", EnableMainCameraAudioListener);
		L.RegFunction("New", _CreateuFacadeUtility);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("showLogin", get_showLogin, set_showLogin);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateuFacadeUtility(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				uFacadeUtility obj = new uFacadeUtility();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: uFacadeUtility.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCaller(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = uFacadeUtility.GetCaller();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLuaStack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IntPtr arg0 = (System.IntPtr)LuaDLL.lua_touserdata(L, 1);
			uLuaTValue[] o = uFacadeUtility.GetLuaStack(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PauseGame(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			uFacadeUtility.PauseGame();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResumeGame(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			uFacadeUtility.ResumeGame();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendStopMoveMsg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			uFacadeUtility.SendStopMoveMsg();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SyncStartMoveDeduce(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaTable arg0 = ToLua.CheckLuaTable(L, 1);
			uFacadeUtility.SyncStartMoveDeduce(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SyncStartMove(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaTable)))
			{
				LuaTable arg0 = ToLua.ToLuaTable(L, 1);
				uFacadeUtility.SyncStartMove(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaTable), typeof(bool)))
			{
				LuaTable arg0 = ToLua.ToLuaTable(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				uFacadeUtility.SyncStartMove(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: uFacadeUtility.SyncStartMove");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SyncStopMove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			uFacadeUtility.SyncStopMove();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SyncCastSkill(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(int)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				uFacadeUtility.SyncCastSkill(arg0, arg1);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(int), typeof(float), typeof(float), typeof(float)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
				float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
				uFacadeUtility.SyncCastSkill(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: uFacadeUtility.SyncCastSkill");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartSkillButtonCd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			uFacadeUtility.StartSkillButtonCd(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowSelectEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			uFacadeUtility.ShowSelectEffect(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShakeMainCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ShakeCameraType arg0 = (ShakeCameraType)ToLua.CheckObject(L, 1, typeof(ShakeCameraType));
			uFacadeUtility.ShakeMainCamera(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowClickMoveEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			uFacadeUtility.ShowClickMoveEffect(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAvatarTitle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			UIWrapper o = uFacadeUtility.GetAvatarTitle(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateTitle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			System.Action<UIWrapper> arg4 = null;
			LuaTypes funcType5 = LuaDLL.lua_type(L, 5);

			if (funcType5 != LuaTypes.LUA_TFUNCTION)
			{
				 arg4 = (System.Action<UIWrapper>)ToLua.CheckObject(L, 5, typeof(System.Action<UIWrapper>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 5);
				arg4 = DelegateFactory.CreateDelegate(typeof(System.Action<UIWrapper>), func) as System.Action<UIWrapper>;
			}

			uFacadeUtility.CreateTitle(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyDropItem(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			uFacadeUtility.DestroyDropItem(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowAvatarTitle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
			uFacadeUtility.ShowAvatarTitle(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowDropItemTitle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
			uFacadeUtility.ShowDropItemTitle(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateDropItemFromPrefab(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 12);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
			float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
			float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
			float arg7 = (float)LuaDLL.luaL_checknumber(L, 8);
			float arg8 = (float)LuaDLL.luaL_checknumber(L, 9);
			float arg9 = (float)LuaDLL.luaL_checknumber(L, 10);
			float arg10 = (float)LuaDLL.luaL_checknumber(L, 11);
			LuaFunction arg11 = ToLua.CheckLuaFunction(L, 12);
			uFacadeUtility.CreateDropItemFromPrefab(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateDropItemFromTexture(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 12);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
			float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
			float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
			float arg7 = (float)LuaDLL.luaL_checknumber(L, 8);
			float arg8 = (float)LuaDLL.luaL_checknumber(L, 9);
			float arg9 = (float)LuaDLL.luaL_checknumber(L, 10);
			float arg10 = (float)LuaDLL.luaL_checknumber(L, 11);
			LuaFunction arg11 = ToLua.CheckLuaFunction(L, 12);
			uFacadeUtility.CreateDropItemFromTexture(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnAvatarCreateFinished(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			uCharacterController arg0 = (uCharacterController)ToLua.CheckUnityObject(L, 1, typeof(uCharacterController));
			UIWrapper arg1 = (UIWrapper)ToLua.CheckUnityObject(L, 2, typeof(UIWrapper));
			uFacadeUtility.OnAvatarCreateFinished(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateOtherPlayer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 11);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
			string arg5 = ToLua.CheckString(L, 6);
			string arg6 = ToLua.CheckString(L, 7);
			string arg7 = ToLua.CheckString(L, 8);
			float arg8 = (float)LuaDLL.luaL_checknumber(L, 9);
			int arg9 = (int)LuaDLL.luaL_checknumber(L, 10);
			string arg10 = ToLua.CheckString(L, 11);
			uFacadeUtility.CreateOtherPlayer(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreatePlayer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 12);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
			string arg5 = ToLua.CheckString(L, 6);
			string arg6 = ToLua.CheckString(L, 7);
			string arg7 = ToLua.CheckString(L, 8);
			float arg8 = (float)LuaDLL.luaL_checknumber(L, 9);
			int arg9 = (int)LuaDLL.luaL_checknumber(L, 10);
			string arg10 = ToLua.CheckString(L, 11);
			LuaFunction arg11 = ToLua.CheckLuaFunction(L, 12);
			uFacadeUtility.CreatePlayer(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateOperateAvatar(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 11);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
			string arg5 = ToLua.CheckString(L, 6);
			string arg6 = ToLua.CheckString(L, 7);
			string arg7 = ToLua.CheckString(L, 8);
			float arg8 = (float)LuaDLL.luaL_checknumber(L, 9);
			int arg9 = (int)LuaDLL.luaL_checknumber(L, 10);
			string arg10 = ToLua.CheckString(L, 11);
			uFacadeUtility.CreateOperateAvatar(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateAvatar(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 10 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(int), typeof(UnityEngine.Vector3), typeof(string), typeof(string), typeof(string), typeof(float), typeof(int), typeof(string), typeof(System.Action<uAvatarController,UIWrapper>)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				string arg3 = ToLua.ToString(L, 4);
				string arg4 = ToLua.ToString(L, 5);
				string arg5 = ToLua.ToString(L, 6);
				float arg6 = (float)LuaDLL.lua_tonumber(L, 7);
				int arg7 = (int)LuaDLL.lua_tonumber(L, 8);
				string arg8 = ToLua.ToString(L, 9);
				System.Action<uAvatarController,UIWrapper> arg9 = null;
				LuaTypes funcType10 = LuaDLL.lua_type(L, 10);

				if (funcType10 != LuaTypes.LUA_TFUNCTION)
				{
					 arg9 = (System.Action<uAvatarController,UIWrapper>)ToLua.ToObject(L, 10);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 10);
					arg9 = DelegateFactory.CreateDelegate(typeof(System.Action<uAvatarController,UIWrapper>), func) as System.Action<uAvatarController,UIWrapper>;
				}

				uFacadeUtility.CreateAvatar(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				return 0;
			}
			else if (count == 11 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(int), typeof(float), typeof(float), typeof(float), typeof(string), typeof(string), typeof(string), typeof(float), typeof(int), typeof(string)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
				float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
				string arg5 = ToLua.ToString(L, 6);
				string arg6 = ToLua.ToString(L, 7);
				string arg7 = ToLua.ToString(L, 8);
				float arg8 = (float)LuaDLL.lua_tonumber(L, 9);
				int arg9 = (int)LuaDLL.lua_tonumber(L, 10);
				string arg10 = ToLua.ToString(L, 11);
				uFacadeUtility.CreateAvatar(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: uFacadeUtility.CreateAvatar");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateModel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			System.Action<UnityEngine.GameObject> arg3 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg3 = (System.Action<UnityEngine.GameObject>)ToLua.CheckObject(L, 4, typeof(System.Action<UnityEngine.GameObject>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg3 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.GameObject>), func) as System.Action<UnityEngine.GameObject>;
			}

			uFacadeUtility.CreateModel(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CanRouteTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			bool o = uFacadeUtility.CanRouteTo(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetClosestPositionOnSegment(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			UnityEngine.Vector3 o = uFacadeUtility.GetClosestPositionOnSegment(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalcTeleportPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 8);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
			float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
			float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
			LuaTable arg7 = ToLua.CheckLuaTable(L, 8);
			bool o = uFacadeUtility.CalcTeleportPath(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearGizmosPath(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				uFacadeUtility.ClearGizmosPath();
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(int)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				uFacadeUtility.ClearGizmosPath(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: uFacadeUtility.ClearGizmosPath");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadGizmosPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaTable arg0 = ToLua.CheckLuaTable(L, 1);
			uFacadeUtility.LoadGizmosPath(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalcChasePath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 8);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
			float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
			float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
			LuaTable arg7 = ToLua.CheckLuaTable(L, 8);
			bool o = uFacadeUtility.CalcChasePath(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalcPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
			float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
			LuaTable arg6 = ToLua.CheckLuaTable(L, 7);
			bool o = uFacadeUtility.CalcPath(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalcAutoFightReturnPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 8);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
			float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
			float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
			LuaTable arg7 = ToLua.CheckLuaTable(L, 8);
			bool o = uFacadeUtility.CalcAutoFightReturnPath(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalcRaycastPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 8);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
			float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
			float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
			LuaTable arg7 = ToLua.CheckLuaTable(L, 8);
			bool o = uFacadeUtility.CalcRaycastPath(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayMusic(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			uFacadeUtility.PlayMusic(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateLogin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			uFacadeUtility.CreateLogin();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReturnToSelectRoleUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			uFacadeUtility.ReturnToSelectRoleUI();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReturnToLoginScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			uFacadeUtility.ReturnToLoginScene();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlaySound(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				uFacadeUtility.PlaySound(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(bool)))
			{
				string arg0 = ToLua.ToString(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				uFacadeUtility.PlaySound(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: uFacadeUtility.PlaySound");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlaySoundDontDestroyOnLoad(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				uFacadeUtility.PlaySoundDontDestroyOnLoad(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(bool)))
			{
				string arg0 = ToLua.ToString(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				uFacadeUtility.PlaySoundDontDestroyOnLoad(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: uFacadeUtility.PlaySoundDontDestroyOnLoad");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAreaFootstep(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			int o = uFacadeUtility.GetAreaFootstep(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayState(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(string), typeof(float)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
				uFacadeUtility.PlayState(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 7 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(bool), typeof(string), typeof(float), typeof(bool), typeof(string), typeof(float)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
				bool arg4 = LuaDLL.lua_toboolean(L, 5);
				string arg5 = ToLua.ToString(L, 6);
				float arg6 = (float)LuaDLL.lua_tonumber(L, 7);
				uFacadeUtility.PlayState(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: uFacadeUtility.PlayState");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsCurrentStateOf(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.Animator));
			string arg1 = ToLua.CheckString(L, 2);
			bool o = uFacadeUtility.IsCurrentStateOf(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetStateSpeed(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			uFacadeUtility.SetStateSpeed(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyAllAvatars(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			uFacadeUtility.DestroyAllAvatars();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyAvatarImmediate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			uFacadeUtility.DestroyAvatarImmediate(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyAvatar(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			uFacadeUtility.DestroyAvatar(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateLoadingUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			uFacadeUtility.CreateLoadingUI();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyLoadingUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			uFacadeUtility.DestroyLoadingUI();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadLoginScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			uFacadeUtility.LoadLoginScene(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FinishLoadingScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			uFacadeUtility.FinishLoadingScene();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
			LuaTable arg5 = ToLua.CheckLuaTable(L, 6);
			uFacadeUtility.LoadScene(arg0, arg1, arg2, arg3, arg4, arg5);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			uFacadeUtility.ShowScene();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FloatText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 9);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			string arg3 = ToLua.CheckString(L, 4);
			string arg4 = ToLua.CheckString(L, 5);
			float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
			float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
			float arg7 = (float)LuaDLL.luaL_checknumber(L, 8);
			float arg8 = (float)LuaDLL.luaL_checknumber(L, 9);
			uFacadeUtility.FloatText(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveBuff(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			uFacadeUtility.RemoveBuff(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayBuffEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			string arg4 = ToLua.CheckString(L, 5);
			uFacadeUtility.PlayBuffEffect(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyDropItemEffects(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			uFacadeUtility.DestroyDropItemEffects(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayDropItemEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
			float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
			LuaFunction arg6 = ToLua.CheckLuaFunction(L, 7);
			uFacadeUtility.PlayDropItemEffect(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayPositionEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			string arg0 = ToLua.CheckString(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
			float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
			LuaFunction arg6 = ToLua.CheckLuaFunction(L, 7);
			uFacadeUtility.PlayPositionEffect(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayBulletTraceEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			string arg0 = ToLua.CheckString(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
			string arg5 = ToLua.CheckString(L, 6);
			LuaFunction arg6 = ToLua.CheckLuaFunction(L, 7);
			uFacadeUtility.PlayBulletTraceEffect(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _GetBindPosTransform(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			uCharacterController arg0 = (uCharacterController)ToLua.CheckUnityObject(L, 1, typeof(uCharacterController));
			string arg1 = ToLua.CheckString(L, 2);
			UnityEngine.Transform o = uFacadeUtility._GetBindPosTransform(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayFollowEffect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(float), typeof(int), typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				string arg3 = ToLua.ToString(L, 4);
				uFacadeUtility.PlayFollowEffect(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 7 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(float), typeof(int), typeof(string), typeof(float), typeof(float), typeof(float)))
			{
				string arg0 = ToLua.ToString(L, 1);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				string arg3 = ToLua.ToString(L, 4);
				float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
				float arg5 = (float)LuaDLL.lua_tonumber(L, 6);
				float arg6 = (float)LuaDLL.lua_tonumber(L, 7);
				uFacadeUtility.PlayFollowEffect(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: uFacadeUtility.PlayFollowEffect");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _PlayFollowEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			string arg0 = ToLua.CheckString(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			uCharacterController arg2 = (uCharacterController)ToLua.CheckUnityObject(L, 3, typeof(uCharacterController));
			string arg3 = ToLua.CheckString(L, 4);
			UnityEngine.Vector3 arg4 = ToLua.ToVector3(L, 5);
			System.Action<UnityEngine.GameObject> arg5 = null;
			LuaTypes funcType6 = LuaDLL.lua_type(L, 6);

			if (funcType6 != LuaTypes.LUA_TFUNCTION)
			{
				 arg5 = (System.Action<UnityEngine.GameObject>)ToLua.CheckObject(L, 6, typeof(System.Action<UnityEngine.GameObject>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 6);
				arg5 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.GameObject>), func) as System.Action<UnityEngine.GameObject>;
			}

			uFacadeUtility._PlayFollowEffect(arg0, arg1, arg2, arg3, arg4, arg5);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayStaticEffect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(float), typeof(int), typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				string arg3 = ToLua.ToString(L, 4);
				uFacadeUtility.PlayStaticEffect(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(float), typeof(float), typeof(float), typeof(float)))
			{
				string arg0 = ToLua.ToString(L, 1);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
				float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
				uFacadeUtility.PlayStaticEffect(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: uFacadeUtility.PlayStaticEffect");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _PlayStaticEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			string arg0 = ToLua.CheckString(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			uCharacterController arg2 = (uCharacterController)ToLua.CheckUnityObject(L, 3, typeof(uCharacterController));
			string arg3 = ToLua.CheckString(L, 4);
			uFacadeUtility._PlayStaticEffect(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayBillboardEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
			float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
			float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
			uFacadeUtility.PlayBillboardEffect(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayPlaceEffect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 8 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(float), typeof(int), typeof(int), typeof(int), typeof(string), typeof(int), typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
				string arg5 = ToLua.ToString(L, 6);
				int arg6 = (int)LuaDLL.lua_tonumber(L, 7);
				string arg7 = ToLua.ToString(L, 8);
				uFacadeUtility.PlayPlaceEffect(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return 0;
			}
			else if (count == 9 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(float), typeof(string), typeof(int), typeof(int), typeof(int), typeof(string), typeof(int), typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
				int arg5 = (int)LuaDLL.lua_tonumber(L, 6);
				string arg6 = ToLua.ToString(L, 7);
				int arg7 = (int)LuaDLL.lua_tonumber(L, 8);
				string arg8 = ToLua.ToString(L, 9);
				uFacadeUtility.PlayPlaceEffect(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: uFacadeUtility.PlayPlaceEffect");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayLineBulletEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			string arg0 = ToLua.CheckString(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			string arg4 = ToLua.CheckString(L, 5);
			float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
			LuaFunction arg6 = ToLua.CheckLuaFunction(L, 7);
			uFacadeUtility.PlayLineBulletEffect(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _PlayBulletEffect_Line(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			string arg0 = ToLua.CheckString(L, 1);
			uCharacterController arg1 = (uCharacterController)ToLua.CheckUnityObject(L, 2, typeof(uCharacterController));
			string arg2 = ToLua.CheckString(L, 3);
			uCharacterController arg3 = (uCharacterController)ToLua.CheckUnityObject(L, 4, typeof(uCharacterController));
			string arg4 = ToLua.CheckString(L, 5);
			float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
			System.Action arg6 = null;
			LuaTypes funcType7 = LuaDLL.lua_type(L, 7);

			if (funcType7 != LuaTypes.LUA_TFUNCTION)
			{
				 arg6 = (System.Action)ToLua.CheckObject(L, 7, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 7);
				arg6 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			uFacadeUtility._PlayBulletEffect_Line(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayRayBulletEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 8);
			string arg0 = ToLua.CheckString(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			string arg4 = ToLua.CheckString(L, 5);
			float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
			float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
			LuaFunction arg7 = ToLua.CheckLuaFunction(L, 8);
			uFacadeUtility.PlayRayBulletEffect(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _PlayBulletEffect_Ray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 8);
			string arg0 = ToLua.CheckString(L, 1);
			uCharacterController arg1 = (uCharacterController)ToLua.CheckUnityObject(L, 2, typeof(uCharacterController));
			string arg2 = ToLua.CheckString(L, 3);
			uCharacterController arg3 = (uCharacterController)ToLua.CheckUnityObject(L, 4, typeof(uCharacterController));
			string arg4 = ToLua.CheckString(L, 5);
			float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
			float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
			System.Action arg7 = null;
			LuaTypes funcType8 = LuaDLL.lua_type(L, 8);

			if (funcType8 != LuaTypes.LUA_TFUNCTION)
			{
				 arg7 = (System.Action)ToLua.CheckObject(L, 8, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 8);
				arg7 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			uFacadeUtility._PlayBulletEffect_Ray(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateJoystickRun(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			uFacadeUtility.UpdateJoystickRun(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _PlayPlaceEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 8);
			string arg0 = ToLua.CheckString(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			EffectBindType arg2 = (EffectBindType)ToLua.CheckObject(L, 3, typeof(EffectBindType));
			EffectBindTarget arg3 = (EffectBindTarget)ToLua.CheckObject(L, 4, typeof(EffectBindTarget));
			uCharacterController arg4 = (uCharacterController)ToLua.CheckUnityObject(L, 5, typeof(uCharacterController));
			string arg5 = ToLua.CheckString(L, 6);
			uCharacterController arg6 = (uCharacterController)ToLua.CheckUnityObject(L, 7, typeof(uCharacterController));
			string arg7 = ToLua.CheckString(L, 8);
			uFacadeUtility._PlayPlaceEffect(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayLighteningEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			string arg0 = ToLua.CheckString(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			string arg3 = ToLua.CheckString(L, 4);
			int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
			string arg5 = ToLua.CheckString(L, 6);
			uFacadeUtility.PlayLighteningEffect(arg0, arg1, arg2, arg3, arg4, arg5);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _PlayLighteningEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			string arg0 = ToLua.CheckString(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			uCharacterController arg2 = (uCharacterController)ToLua.CheckUnityObject(L, 3, typeof(uCharacterController));
			string arg3 = ToLua.CheckString(L, 4);
			uCharacterController arg4 = (uCharacterController)ToLua.CheckUnityObject(L, 5, typeof(uCharacterController));
			string arg5 = ToLua.CheckString(L, 6);
			uFacadeUtility._PlayLighteningEffect(arg0, arg1, arg2, arg3, arg4, arg5);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AdjustTitleHeight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			uFacadeUtility.AdjustTitleHeight(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddBoxCollider(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
			float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
			float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
			uFacadeUtility.AddBoxCollider(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PutOnWeapon(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			LuaFunction arg3 = ToLua.CheckLuaFunction(L, 4);
			uFacadeUtility.PutOnWeapon(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PutOnSuit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			System.Action arg3 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg3 = (System.Action)ToLua.CheckObject(L, 4, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg3 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			uFacadeUtility.PutOnSuit(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAvatarLayer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			uFacadeUtility.SetAvatarLayer(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CallLuaFunctionArg0(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 1);
			uFacadeUtility.CallLuaFunctionArg0(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CallLuaFunctionArgLuaTable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 1);
			LuaTable arg1 = ToLua.CheckLuaTable(L, 2);
			uFacadeUtility.CallLuaFunctionArgLuaTable(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CallLuaFunctionArgNum(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 1);
			double[] arg1 = ToLua.CheckParamsNumber<double>(L, 2, count - 1);
			uFacadeUtility.CallLuaFunctionArgNum(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CallLuaFunctionArgStr(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 1);
			string[] arg1 = ToLua.CheckParamsString(L, 2, count - 1);
			uFacadeUtility.CallLuaFunctionArgStr(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PutonWeapon(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			UnityEngine.GameObject arg2 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 3, typeof(UnityEngine.GameObject));
			uFacadeUtility.PutonWeapon(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RideHorse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			uFacadeUtility.RideHorse(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnRideHorse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			uFacadeUtility.UnRideHorse(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HorseAnimatorPlay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			uFacadeUtility.HorseAnimatorPlay(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadHorse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			System.Action arg2 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (System.Action)ToLua.CheckObject(L, 3, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg2 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			uFacadeUtility.LoadHorse(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateHorseEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
			bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			string arg3 = ToLua.CheckString(L, 4);
			uFacadeUtility.UpdateHorseEffect(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateHorseEffectById(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			string arg3 = ToLua.CheckString(L, 4);
			uFacadeUtility.UpdateHorseEffectById(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDropItemPos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			uFacadeUtility.SetDropItemPos(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetSync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			uFacadeUtility.ResetSync();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAnimatorFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			float o = uFacadeUtility.GetAnimatorFloat(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAnimatorFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			uFacadeUtility.SetAnimatorFloat(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAvatarPosAndDir(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				uFacadeUtility.SetAvatarPosAndDir(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 7 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(float), typeof(float), typeof(float), typeof(float), typeof(float), typeof(float)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
				float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
				float arg5 = (float)LuaDLL.lua_tonumber(L, 6);
				float arg6 = (float)LuaDLL.lua_tonumber(L, 7);
				uFacadeUtility.SetAvatarPosAndDir(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: uFacadeUtility.SetAvatarPosAndDir");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAvatarPos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			uFacadeUtility.SetAvatarPos(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAvatarDir(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			uFacadeUtility.SetAvatarDir(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RotateToPos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			uFacadeUtility.RotateToPos(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAvatarScale(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			uFacadeUtility.SetAvatarScale(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowMesh(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
			uFacadeUtility.ShowMesh(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Tremble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			uFacadeUtility.Tremble(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ActiveShader(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			uFacadeUtility.ActiveShader(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FlashWhite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			uFacadeUtility.FlashWhite(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayWarnEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 11);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
			int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
			int arg5 = (int)LuaDLL.luaL_checknumber(L, 6);
			int arg6 = (int)LuaDLL.luaL_checknumber(L, 7);
			float arg7 = (float)LuaDLL.luaL_checknumber(L, 8);
			float arg8 = (float)LuaDLL.luaL_checknumber(L, 9);
			float arg9 = (float)LuaDLL.luaL_checknumber(L, 10);
			float arg10 = (float)LuaDLL.luaL_checknumber(L, 11);
			uFacadeUtility.PlayWarnEffect(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CommitGizmosPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			LuaTable arg1 = ToLua.CheckLuaTable(L, 2);
			uFacadeUtility.CommitGizmosPath(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int JumpState(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(string)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				uFacadeUtility.JumpState(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(string), typeof(float)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
				uFacadeUtility.JumpState(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: uFacadeUtility.JumpState");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowRebirthUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			uFacadeUtility.ShowRebirthUI();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDrawUnit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
			UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			UnityEngine.GameObject arg2 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 3, typeof(UnityEngine.GameObject));
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
			uFacadeUtility.SetDrawUnit(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GeneratePath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaTable arg0 = ToLua.CheckLuaTable(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			uFacadeUtility.GeneratePath(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			uFacadeUtility.ClearPath();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearPathDrawer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			uFacadeUtility.ClearPathDrawer();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateMaterial(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.Material o = uFacadeUtility.CreateMaterial(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDeadGauss(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			uFacadeUtility.SetDeadGauss(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAvatarVisible(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
			uFacadeUtility.SetAvatarVisible(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddFollowEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			uFacadeUtility.AddFollowEffect(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SavePlayerPrefs(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			uFacadeUtility.SavePlayerPrefs(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasPlayerPrefs(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = uFacadeUtility.HasPlayerPrefs(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPlayerPrefs(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = uFacadeUtility.GetPlayerPrefs(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMusicMute(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			uFacadeUtility.SetMusicMute(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSoundMute(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			uFacadeUtility.SetSoundMute(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSyncWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			uFacadeUtility.SetSyncWindow(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddMask(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
			bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
			UIWrapper o = uFacadeUtility.AddMask(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveMask(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIWrapper arg0 = (UIWrapper)ToLua.CheckUnityObject(L, 1, typeof(UIWrapper));
			uFacadeUtility.RemoveMask(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLayer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIWrapper arg0 = (UIWrapper)ToLua.CheckUnityObject(L, 1, typeof(UIWrapper));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			uFacadeUtility.SetLayer(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateUI(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(LuaInterface.LuaTable)))
			{
				string arg0 = ToLua.ToString(L, 1);
				LuaTable arg1 = ToLua.ToLuaTable(L, 2);
				uFacadeUtility.CreateUI(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(LuaInterface.LuaTable), typeof(object)))
			{
				string arg0 = ToLua.ToString(L, 1);
				LuaTable arg1 = ToLua.ToLuaTable(L, 2);
				object arg2 = ToLua.ToVarObject(L, 3);
				uFacadeUtility.CreateUI(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: uFacadeUtility.CreateUI");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetShowLogin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = uFacadeUtility.GetShowLogin();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetShowLogin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			uFacadeUtility.SetShowLogin(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnablePlayerAudioListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			uFacadeUtility.EnablePlayerAudioListener();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DisablePlayerAudioListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			uFacadeUtility.DisablePlayerAudioListener();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnableMainCameraAudioListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			uFacadeUtility.EnableMainCameraAudioListener();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showLogin(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, uFacadeUtility.showLogin);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showLogin(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			uFacadeUtility.showLogin = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

