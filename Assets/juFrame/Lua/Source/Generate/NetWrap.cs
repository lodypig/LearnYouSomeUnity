//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NetWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Net), typeof(MonoSingleton<Net>));
		L.RegFunction("Destroy", Destroy);
		L.RegFunction("StartReconnect", StartReconnect);
		L.RegFunction("Send", Send);
		L.RegFunction("SendLua", SendLua);
		L.RegFunction("send", send);
		L.RegFunction("isOpen", isOpen);
		L.RegFunction("close", close);
		L.RegFunction("Close", Close);
		L.RegFunction("Log", Log);
		L.RegFunction("LogWarning", LogWarning);
		L.RegFunction("LogError", LogError);
		L.RegFunction("OnDestroy", OnDestroy);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("showConnectFailed", get_showConnectFailed, set_showConnectFailed);
		L.RegVar("serverName", get_serverName, set_serverName);
		L.RegVar("serverIP", get_serverIP, set_serverIP);
		L.RegVar("onRelogin", get_onRelogin, set_onRelogin);
		L.RegVar("onConnectLost", get_onConnectLost, set_onConnectLost);
		L.RegVar("onShowConnectUI", get_onShowConnectUI, set_onShowConnectUI);
		L.RegVar("onShowReconnectFailed", get_onShowReconnectFailed, set_onShowReconnectFailed);
		L.RegVar("ReconnectFlag", get_ReconnectFlag, set_ReconnectFlag);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Destroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Net obj = (Net)ToLua.CheckObject(L, 1, typeof(Net));
			obj.Destroy();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartReconnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Net obj = (Net)ToLua.CheckObject(L, 1, typeof(Net));
			obj.StartReconnect();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Send(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(ErlKVMessage), typeof(bool)))
			{
				ErlKVMessage arg0 = (ErlKVMessage)ToLua.ToObject(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				Net.Send(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(ErlKVMessage), typeof(System.Action<ErlKVMessage>), typeof(bool)))
			{
				ErlKVMessage arg0 = (ErlKVMessage)ToLua.ToObject(L, 1);
				System.Action<ErlKVMessage> arg1 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (System.Action<ErlKVMessage>)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<ErlKVMessage>), func) as System.Action<ErlKVMessage>;
				}

				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				Net.Send(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Net.Send");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendLua(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ErlKVMessage arg0 = (ErlKVMessage)ToLua.CheckObject(L, 1, typeof(ErlKVMessage));
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 2);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			Net.SendLua(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int send(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Net obj = (Net)ToLua.CheckObject(L, 1, typeof(Net));
			ErlKVMessage arg0 = (ErlKVMessage)ToLua.CheckObject(L, 2, typeof(ErlKVMessage));
			System.Action<ErlKVMessage> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<ErlKVMessage>)ToLua.CheckObject(L, 3, typeof(System.Action<ErlKVMessage>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<ErlKVMessage>), func) as System.Action<ErlKVMessage>;
			}

			bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
			obj.send(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int isOpen(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Net obj = (Net)ToLua.CheckObject(L, 1, typeof(Net));
			bool o = obj.isOpen();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Net obj = (Net)ToLua.CheckObject(L, 1, typeof(Net));
			obj.close();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Net.Close();
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(Connect)))
			{
				Connect arg0 = (Connect)ToLua.ToObject(L, 1);
				Net.Close(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Net.Close");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Log(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			object arg0 = ToLua.ToVarObject(L, 1);
			Net.Log(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogWarning(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			object arg0 = ToLua.ToVarObject(L, 1);
			Net.LogWarning(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogError(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			object arg0 = ToLua.ToVarObject(L, 1);
			Net.LogError(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDestroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Net obj = (Net)ToLua.CheckObject(L, 1, typeof(Net));
			obj.OnDestroy();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showConnectFailed(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, Net.showConnectFailed);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_serverName(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Net.serverName);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_serverIP(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Net.serverIP);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onRelogin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Net obj = (Net)o;
			LuaInterface.LuaFunction ret = obj.onRelogin;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onRelogin on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onConnectLost(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Net obj = (Net)o;
			LuaInterface.LuaFunction ret = obj.onConnectLost;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onConnectLost on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onShowConnectUI(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Net obj = (Net)o;
			LuaInterface.LuaFunction ret = obj.onShowConnectUI;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onShowConnectUI on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onShowReconnectFailed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Net obj = (Net)o;
			LuaInterface.LuaFunction ret = obj.onShowReconnectFailed;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onShowReconnectFailed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReconnectFlag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Net obj = (Net)o;
			bool ret = obj.ReconnectFlag;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ReconnectFlag on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showConnectFailed(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			Net.showConnectFailed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_serverName(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			Net.serverName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_serverIP(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			Net.serverIP = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onRelogin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Net obj = (Net)o;
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.onRelogin = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onRelogin on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onConnectLost(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Net obj = (Net)o;
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.onConnectLost = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onConnectLost on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onShowConnectUI(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Net obj = (Net)o;
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.onShowConnectUI = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onShowConnectUI on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onShowReconnectFailed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Net obj = (Net)o;
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.onShowReconnectFailed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onShowReconnectFailed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ReconnectFlag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Net obj = (Net)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ReconnectFlag = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ReconnectFlag on a nil value" : e.Message);
		}
	}
}

