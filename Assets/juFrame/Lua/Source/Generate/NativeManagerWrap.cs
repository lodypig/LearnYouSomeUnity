//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NativeManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NativeManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("GetInstance", GetInstance);
		L.RegFunction("shouldForbideTouch", shouldForbideTouch);
		L.RegFunction("BindSpeechResult", BindSpeechResult);
		L.RegFunction("BindSpeechBegin", BindSpeechBegin);
		L.RegFunction("BindSpeechEnd", BindSpeechEnd);
		L.RegFunction("BindSpeechError", BindSpeechError);
		L.RegFunction("BindSpeechVolumeChange", BindSpeechVolumeChange);
		L.RegFunction("StartSpeech", StartSpeech);
		L.RegFunction("StopSpeech", StopSpeech);
		L.RegFunction("CancelSpeech", CancelSpeech);
		L.RegFunction("GetAudioPath", GetAudioPath);
		L.RegFunction("ShowEditBox", ShowEditBox);
		L.RegFunction("SetEditBoxString", SetEditBoxString);
		L.RegFunction("CloseEditBox", CloseEditBox);
		L.RegFunction("OnVolumeChanged", OnVolumeChanged);
		L.RegFunction("OnSpeechResult", OnSpeechResult);
		L.RegFunction("OnSpeechBegin", OnSpeechBegin);
		L.RegFunction("OnSpeechEnd", OnSpeechEnd);
		L.RegFunction("GetBattery", GetBattery);
		L.RegFunction("GetBatteryCharging", GetBatteryCharging);
		L.RegFunction("GetNetState", GetNetState);
		L.RegFunction("ShowNotification", ShowNotification);
		L.RegFunction("CancelNotification", CancelNotification);
		L.RegFunction("CancelAllNotifications", CancelAllNotifications);
		L.RegFunction("GetRegistrationID", GetRegistrationID);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("editBoxForbideTouch", get_editBoxForbideTouch, set_editBoxForbideTouch);
		L.RegVar("isKeyboardOpened", get_isKeyboardOpened, set_isKeyboardOpened);
		L.RegVar("isStartSpeech", get_isStartSpeech, set_isStartSpeech);
		L.RegVar("Speech", get_Speech, null);
		L.RegVar("EditBox", get_EditBox, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInstance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			NativeManager o = NativeManager.GetInstance();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int shouldForbideTouch(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NativeManager obj = (NativeManager)ToLua.CheckObject(L, 1, typeof(NativeManager));
			bool o = obj.shouldForbideTouch();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindSpeechResult(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NativeManager obj = (NativeManager)ToLua.CheckObject(L, 1, typeof(NativeManager));
			System.Action<string,byte[],int> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<string,byte[],int>)ToLua.CheckObject(L, 2, typeof(System.Action<string,byte[],int>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<string,byte[],int>), func) as System.Action<string,byte[],int>;
			}

			obj.BindSpeechResult(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindSpeechBegin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NativeManager obj = (NativeManager)ToLua.CheckObject(L, 1, typeof(NativeManager));
			System.Action arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action)ToLua.CheckObject(L, 2, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			obj.BindSpeechBegin(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindSpeechEnd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NativeManager obj = (NativeManager)ToLua.CheckObject(L, 1, typeof(NativeManager));
			System.Action arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action)ToLua.CheckObject(L, 2, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			obj.BindSpeechEnd(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindSpeechError(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NativeManager obj = (NativeManager)ToLua.CheckObject(L, 1, typeof(NativeManager));
			System.Action<string> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<string>)ToLua.CheckObject(L, 2, typeof(System.Action<string>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<string>), func) as System.Action<string>;
			}

			obj.BindSpeechError(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindSpeechVolumeChange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NativeManager obj = (NativeManager)ToLua.CheckObject(L, 1, typeof(NativeManager));
			System.Action<int> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<int>)ToLua.CheckObject(L, 2, typeof(System.Action<int>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<int>), func) as System.Action<int>;
			}

			obj.BindSpeechVolumeChange(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartSpeech(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NativeManager obj = (NativeManager)ToLua.CheckObject(L, 1, typeof(NativeManager));
			obj.StartSpeech();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopSpeech(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NativeManager obj = (NativeManager)ToLua.CheckObject(L, 1, typeof(NativeManager));
			obj.StopSpeech();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CancelSpeech(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NativeManager obj = (NativeManager)ToLua.CheckObject(L, 1, typeof(NativeManager));
			obj.CancelSpeech();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAudioPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NativeManager obj = (NativeManager)ToLua.CheckObject(L, 1, typeof(NativeManager));
			string o = obj.GetAudioPath();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowEditBox(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			NativeManager obj = (NativeManager)ToLua.CheckObject(L, 1, typeof(NativeManager));
			EditBoxMessage arg0 = (EditBoxMessage)ToLua.CheckObject(L, 2, typeof(EditBoxMessage));
			System.Action<string> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<string>)ToLua.CheckObject(L, 3, typeof(System.Action<string>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<string>), func) as System.Action<string>;
			}

			System.Action<string> arg2 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (System.Action<string>)ToLua.CheckObject(L, 4, typeof(System.Action<string>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg2 = DelegateFactory.CreateDelegate(typeof(System.Action<string>), func) as System.Action<string>;
			}

			System.Action<double> arg3 = null;
			LuaTypes funcType5 = LuaDLL.lua_type(L, 5);

			if (funcType5 != LuaTypes.LUA_TFUNCTION)
			{
				 arg3 = (System.Action<double>)ToLua.CheckObject(L, 5, typeof(System.Action<double>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 5);
				arg3 = DelegateFactory.CreateDelegate(typeof(System.Action<double>), func) as System.Action<double>;
			}

			System.Action<string,int> arg4 = null;
			LuaTypes funcType6 = LuaDLL.lua_type(L, 6);

			if (funcType6 != LuaTypes.LUA_TFUNCTION)
			{
				 arg4 = (System.Action<string,int>)ToLua.CheckObject(L, 6, typeof(System.Action<string,int>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 6);
				arg4 = DelegateFactory.CreateDelegate(typeof(System.Action<string,int>), func) as System.Action<string,int>;
			}

			obj.ShowEditBox(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetEditBoxString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NativeManager obj = (NativeManager)ToLua.CheckObject(L, 1, typeof(NativeManager));
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetEditBoxString(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseEditBox(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NativeManager obj = (NativeManager)ToLua.CheckObject(L, 1, typeof(NativeManager));
			obj.CloseEditBox();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnVolumeChanged(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NativeManager obj = (NativeManager)ToLua.CheckObject(L, 1, typeof(NativeManager));
			string arg0 = ToLua.CheckString(L, 2);
			obj.OnVolumeChanged(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnSpeechResult(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NativeManager obj = (NativeManager)ToLua.CheckObject(L, 1, typeof(NativeManager));
			string arg0 = ToLua.CheckString(L, 2);
			obj.OnSpeechResult(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnSpeechBegin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NativeManager obj = (NativeManager)ToLua.CheckObject(L, 1, typeof(NativeManager));
			obj.OnSpeechBegin();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnSpeechEnd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NativeManager obj = (NativeManager)ToLua.CheckObject(L, 1, typeof(NativeManager));
			obj.OnSpeechEnd();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBattery(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NativeManager obj = (NativeManager)ToLua.CheckObject(L, 1, typeof(NativeManager));
			float o = obj.GetBattery();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBatteryCharging(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NativeManager obj = (NativeManager)ToLua.CheckObject(L, 1, typeof(NativeManager));
			int o = obj.GetBatteryCharging();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNetState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NativeManager obj = (NativeManager)ToLua.CheckObject(L, 1, typeof(NativeManager));
			UnityEngine.NetworkReachability o = obj.GetNetState();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowNotification(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			NativeManager obj = (NativeManager)ToLua.CheckObject(L, 1, typeof(NativeManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			long arg1 = LuaDLL.tolua_checkint64(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			string arg3 = ToLua.CheckString(L, 5);
			long arg4 = LuaDLL.tolua_checkint64(L, 6);
			obj.ShowNotification(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CancelNotification(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NativeManager obj = (NativeManager)ToLua.CheckObject(L, 1, typeof(NativeManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.CancelNotification(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CancelAllNotifications(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NativeManager obj = (NativeManager)ToLua.CheckObject(L, 1, typeof(NativeManager));
			obj.CancelAllNotifications();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRegistrationID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NativeManager obj = (NativeManager)ToLua.CheckObject(L, 1, typeof(NativeManager));
			string o = obj.GetRegistrationID();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_editBoxForbideTouch(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NativeManager obj = (NativeManager)o;
			bool ret = obj.editBoxForbideTouch;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index editBoxForbideTouch on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isKeyboardOpened(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NativeManager obj = (NativeManager)o;
			bool ret = obj.isKeyboardOpened;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isKeyboardOpened on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isStartSpeech(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NativeManager obj = (NativeManager)o;
			bool ret = obj.isStartSpeech;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isStartSpeech on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Speech(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, NativeManager.Speech);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EditBox(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, NativeManager.EditBox);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_editBoxForbideTouch(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NativeManager obj = (NativeManager)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.editBoxForbideTouch = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index editBoxForbideTouch on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isKeyboardOpened(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NativeManager obj = (NativeManager)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isKeyboardOpened = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isKeyboardOpened on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isStartSpeech(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NativeManager obj = (NativeManager)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isStartSpeech = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isStartSpeech on a nil value" : e.Message);
		}
	}
}

