//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class StrFiltermangerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(StrFiltermanger), typeof(System.Object));
		L.RegFunction("IsFileter", IsFileter);
		L.RegFunction("Replace", Replace);
		L.RegFunction("MatchTest", MatchTest);
		L.RegFunction("ReplaceTest", ReplaceTest);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Instance", get_Instance, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsFileter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			StrFiltermanger obj = (StrFiltermanger)ToLua.CheckObject(L, 1, typeof(StrFiltermanger));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.IsFileter(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Replace(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			StrFiltermanger obj = (StrFiltermanger)ToLua.CheckObject(L, 1, typeof(StrFiltermanger));
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.Replace(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MatchTest(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			StrFiltermanger obj = (StrFiltermanger)ToLua.CheckObject(L, 1, typeof(StrFiltermanger));
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.MatchTest(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReplaceTest(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			StrFiltermanger obj = (StrFiltermanger)ToLua.CheckObject(L, 1, typeof(StrFiltermanger));
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.ReplaceTest(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, StrFiltermanger.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

