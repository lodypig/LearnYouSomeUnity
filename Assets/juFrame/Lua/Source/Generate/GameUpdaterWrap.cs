//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameUpdaterWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameUpdater), typeof(Singleton<GameUpdater>));
		L.RegFunction("GetInstance", GetInstance);
		L.RegFunction("SetUpdateServer", SetUpdateServer);
		L.RegFunction("AddDownloadingAction", AddDownloadingAction);
		L.RegFunction("RemoveDownloadingAction", RemoveDownloadingAction);
		L.RegFunction("AddFinishedAction", AddFinishedAction);
		L.RegFunction("RemoveFinishedAction", RemoveFinishedAction);
		L.RegFunction("OnUpdateDownloadStart", OnUpdateDownloadStart);
		L.RegFunction("OnUpdateDownloadEnd", OnUpdateDownloadEnd);
		L.RegFunction("OnUpdateDownloading", OnUpdateDownloading);
		L.RegFunction("OnUpdateDownloadError", OnUpdateDownloadError);
		L.RegFunction("OnUpdateDownloadFinished", OnUpdateDownloadFinished);
		L.RegFunction("CheckVersionNumber", CheckVersionNumber);
		L.RegFunction("DeleteCacheVersion", DeleteCacheVersion);
		L.RegFunction("GetFileListNeedDownloaded", GetFileListNeedDownloaded);
		L.RegFunction("UpdateFiles", UpdateFiles);
		L.RegFunction("StopUpdate", StopUpdate);
		L.RegFunction("HasNewVersion", HasNewVersion);
		L.RegFunction("UpdateVersion", UpdateVersion);
		L.RegFunction("New", _CreateGameUpdater);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("CurrentVersionPath", get_CurrentVersionPath, null);
		L.RegVar("CacheVersionPath", get_CacheVersionPath, null);
		L.RegVar("UpdateServer", get_UpdateServer, set_UpdateServer);
		L.RegVar("AndroidServerUrl", get_AndroidServerUrl, set_AndroidServerUrl);
		L.RegVar("IOSServerUrl", get_IOSServerUrl, set_IOSServerUrl);
		L.RegVar("serverName", get_serverName, set_serverName);
		L.RegVar("TotalDownloaded", get_TotalDownloaded, null);
		L.RegVar("CurrentDownloaded", get_CurrentDownloaded, null);
		L.RegVar("DownloadSpeed", get_DownloadSpeed, null);
		L.RegVar("OnStartDownload", get_OnStartDownload, set_OnStartDownload);
		L.RegVar("OnEndDownload", get_OnEndDownload, set_OnEndDownload);
		L.RegVar("OnDownloading", get_OnDownloading, set_OnDownloading);
		L.RegVar("OnFinished", get_OnFinished, set_OnFinished);
		L.RegVar("UpdateInfoMsg", get_UpdateInfoMsg, set_UpdateInfoMsg);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGameUpdater(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GameUpdater obj = new GameUpdater();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GameUpdater.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInstance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			GameUpdater o = GameUpdater.GetInstance();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetUpdateServer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameUpdater obj = (GameUpdater)ToLua.CheckObject(L, 1, typeof(GameUpdater));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SetUpdateServer(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddDownloadingAction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameUpdater obj = (GameUpdater)ToLua.CheckObject(L, 1, typeof(GameUpdater));
			System.Action<UnityEngine.WWW> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.WWW>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.WWW>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.WWW>), func) as System.Action<UnityEngine.WWW>;
			}

			obj.AddDownloadingAction(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveDownloadingAction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameUpdater obj = (GameUpdater)ToLua.CheckObject(L, 1, typeof(GameUpdater));
			System.Action<UnityEngine.WWW> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.WWW>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.WWW>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.WWW>), func) as System.Action<UnityEngine.WWW>;
			}

			obj.RemoveDownloadingAction(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddFinishedAction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameUpdater obj = (GameUpdater)ToLua.CheckObject(L, 1, typeof(GameUpdater));
			System.Action arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action)ToLua.CheckObject(L, 2, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			obj.AddFinishedAction(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveFinishedAction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameUpdater obj = (GameUpdater)ToLua.CheckObject(L, 1, typeof(GameUpdater));
			System.Action arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action)ToLua.CheckObject(L, 2, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			obj.RemoveFinishedAction(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnUpdateDownloadStart(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameUpdater obj = (GameUpdater)ToLua.CheckObject(L, 1, typeof(GameUpdater));
			UnityEngine.WWW arg0 = (UnityEngine.WWW)ToLua.CheckObject(L, 2, typeof(UnityEngine.WWW));
			obj.OnUpdateDownloadStart(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnUpdateDownloadEnd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameUpdater obj = (GameUpdater)ToLua.CheckObject(L, 1, typeof(GameUpdater));
			UnityEngine.WWW arg0 = (UnityEngine.WWW)ToLua.CheckObject(L, 2, typeof(UnityEngine.WWW));
			obj.OnUpdateDownloadEnd(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnUpdateDownloading(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameUpdater obj = (GameUpdater)ToLua.CheckObject(L, 1, typeof(GameUpdater));
			UnityEngine.WWW arg0 = (UnityEngine.WWW)ToLua.CheckObject(L, 2, typeof(UnityEngine.WWW));
			obj.OnUpdateDownloading(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnUpdateDownloadError(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameUpdater obj = (GameUpdater)ToLua.CheckObject(L, 1, typeof(GameUpdater));
			UnityEngine.WWW arg0 = (UnityEngine.WWW)ToLua.CheckObject(L, 2, typeof(UnityEngine.WWW));
			obj.OnUpdateDownloadError(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnUpdateDownloadFinished(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameUpdater obj = (GameUpdater)ToLua.CheckObject(L, 1, typeof(GameUpdater));
			obj.OnUpdateDownloadFinished();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckVersionNumber(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			GameUpdater obj = (GameUpdater)ToLua.CheckObject(L, 1, typeof(GameUpdater));
			VersionConfig arg0 = (VersionConfig)ToLua.CheckObject(L, 2, typeof(VersionConfig));
			VersionConfig arg1 = (VersionConfig)ToLua.CheckObject(L, 3, typeof(VersionConfig));
			bool o = obj.CheckVersionNumber(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeleteCacheVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameUpdater obj = (GameUpdater)ToLua.CheckObject(L, 1, typeof(GameUpdater));
			obj.DeleteCacheVersion();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFileListNeedDownloaded(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			GameUpdater obj = (GameUpdater)ToLua.CheckObject(L, 1, typeof(GameUpdater));
			VersionConfig arg0 = (VersionConfig)ToLua.CheckObject(L, 2, typeof(VersionConfig));
			VersionConfig arg1 = (VersionConfig)ToLua.CheckObject(L, 3, typeof(VersionConfig));
			System.Collections.Generic.List<string> o = obj.GetFileListNeedDownloaded(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateFiles(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameUpdater obj = (GameUpdater)ToLua.CheckObject(L, 1, typeof(GameUpdater));
			obj.UpdateFiles();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameUpdater obj = (GameUpdater)ToLua.CheckObject(L, 1, typeof(GameUpdater));
			obj.StopUpdate();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasNewVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameUpdater obj = (GameUpdater)ToLua.CheckObject(L, 1, typeof(GameUpdater));
			System.Action<bool> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<bool>)ToLua.CheckObject(L, 2, typeof(System.Action<bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<bool>), func) as System.Action<bool>;
			}

			obj.HasNewVersion(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameUpdater obj = (GameUpdater)ToLua.CheckObject(L, 1, typeof(GameUpdater));
			obj.UpdateVersion();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurrentVersionPath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameUpdater.CurrentVersionPath);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CacheVersionPath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameUpdater.CacheVersionPath);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UpdateServer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameUpdater obj = (GameUpdater)o;
			string ret = obj.UpdateServer;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UpdateServer on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AndroidServerUrl(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameUpdater.AndroidServerUrl);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IOSServerUrl(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameUpdater.IOSServerUrl);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_serverName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameUpdater obj = (GameUpdater)o;
			string[] ret = obj.serverName;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index serverName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TotalDownloaded(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameUpdater obj = (GameUpdater)o;
			int ret = obj.TotalDownloaded;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TotalDownloaded on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurrentDownloaded(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameUpdater obj = (GameUpdater)o;
			int ret = obj.CurrentDownloaded;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CurrentDownloaded on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DownloadSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameUpdater obj = (GameUpdater)o;
			float ret = obj.DownloadSpeed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DownloadSpeed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnStartDownload(IntPtr L)
	{
		ToLua.Push(L, new EventObject("GameUpdater.OnStartDownload"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnEndDownload(IntPtr L)
	{
		ToLua.Push(L, new EventObject("GameUpdater.OnEndDownload"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnDownloading(IntPtr L)
	{
		ToLua.Push(L, new EventObject("GameUpdater.OnDownloading"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnFinished(IntPtr L)
	{
		ToLua.Push(L, new EventObject("GameUpdater.OnFinished"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UpdateInfoMsg(IntPtr L)
	{
		ToLua.Push(L, new EventObject("GameUpdater.UpdateInfoMsg"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UpdateServer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameUpdater obj = (GameUpdater)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.UpdateServer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UpdateServer on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AndroidServerUrl(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameUpdater.AndroidServerUrl = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IOSServerUrl(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameUpdater.IOSServerUrl = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_serverName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameUpdater obj = (GameUpdater)o;
			string[] arg0 = ToLua.CheckStringArray(L, 2);
			obj.serverName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index serverName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnStartDownload(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameUpdater.OnStartDownload' can only appear on the left hand side of += or -= when used outside of the type 'GameUpdater'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<UnityEngine.WWW> ev = (System.Action<UnityEngine.WWW>)DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.WWW>), arg0.func);
				GameUpdater.OnStartDownload += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<UnityEngine.WWW> ev = (System.Action<UnityEngine.WWW>)LuaMisc.GetEventHandler(null, typeof(GameUpdater), "OnStartDownload");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.Action<UnityEngine.WWW>)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						GameUpdater.OnStartDownload -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnEndDownload(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameUpdater.OnEndDownload' can only appear on the left hand side of += or -= when used outside of the type 'GameUpdater'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<UnityEngine.WWW> ev = (System.Action<UnityEngine.WWW>)DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.WWW>), arg0.func);
				GameUpdater.OnEndDownload += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<UnityEngine.WWW> ev = (System.Action<UnityEngine.WWW>)LuaMisc.GetEventHandler(null, typeof(GameUpdater), "OnEndDownload");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.Action<UnityEngine.WWW>)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						GameUpdater.OnEndDownload -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnDownloading(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameUpdater.OnDownloading' can only appear on the left hand side of += or -= when used outside of the type 'GameUpdater'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<UnityEngine.WWW> ev = (System.Action<UnityEngine.WWW>)DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.WWW>), arg0.func);
				GameUpdater.OnDownloading += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<UnityEngine.WWW> ev = (System.Action<UnityEngine.WWW>)LuaMisc.GetEventHandler(null, typeof(GameUpdater), "OnDownloading");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.Action<UnityEngine.WWW>)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						GameUpdater.OnDownloading -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnFinished(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameUpdater.OnFinished' can only appear on the left hand side of += or -= when used outside of the type 'GameUpdater'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action ev = (System.Action)DelegateFactory.CreateDelegate(typeof(System.Action), arg0.func);
				GameUpdater.OnFinished += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action ev = (System.Action)LuaMisc.GetEventHandler(null, typeof(GameUpdater), "OnFinished");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.Action)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						GameUpdater.OnFinished -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UpdateInfoMsg(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameUpdater.UpdateInfoMsg' can only appear on the left hand side of += or -= when used outside of the type 'GameUpdater'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<float> ev = (System.Action<float>)DelegateFactory.CreateDelegate(typeof(System.Action<float>), arg0.func);
				GameUpdater.UpdateInfoMsg += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<float> ev = (System.Action<float>)LuaMisc.GetEventHandler(null, typeof(GameUpdater), "UpdateInfoMsg");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.Action<float>)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						GameUpdater.UpdateInfoMsg -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

