//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LookatCameraControllerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LookatCameraController), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("GetLookatPosition", GetLookatPosition);
		L.RegFunction("GetCameraPosition", GetCameraPosition);
		L.RegFunction("SetCameraPosition", SetCameraPosition);
		L.RegFunction("SetCameraRotation", SetCameraRotation);
		L.RegFunction("GetCameraRotation", GetCameraRotation);
		L.RegFunction("CaculateCameraAngle", CaculateCameraAngle);
		L.RegFunction("ValidateDistance", ValidateDistance);
		L.RegFunction("CaculateCameraLookat", CaculateCameraLookat);
		L.RegFunction("CaculatePose", CaculatePose);
		L.RegFunction("AdjustCameraForLookat", AdjustCameraForLookat);
		L.RegFunction("PlayMove", PlayMove);
		L.RegFunction("StopMoving", StopMoving);
		L.RegFunction("MoveCamera", MoveCamera);
		L.RegFunction("UpdateCamera", UpdateCamera);
		L.RegFunction("Start", Start);
		L.RegFunction("Lookat", Lookat);
		L.RegFunction("LateUpdate", LateUpdate);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("target", get_target, set_target);
		L.RegVar("offset", get_offset, set_offset);
		L.RegVar("distance", get_distance, set_distance);
		L.RegVar("minDistance", get_minDistance, set_minDistance);
		L.RegVar("maxDistance", get_maxDistance, set_maxDistance);
		L.RegVar("lon", get_lon, set_lon);
		L.RegVar("lat", get_lat, set_lat);
		L.RegVar("isMoving", get_isMoving, set_isMoving);
		L.RegVar("moveSpeed", get_moveSpeed, set_moveSpeed);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLookatPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LookatCameraController obj = (LookatCameraController)ToLua.CheckObject(L, 1, typeof(LookatCameraController));
			UnityEngine.Vector3 o = obj.GetLookatPosition();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCameraPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LookatCameraController obj = (LookatCameraController)ToLua.CheckObject(L, 1, typeof(LookatCameraController));
			UnityEngine.Vector3 o = obj.GetCameraPosition();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCameraPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LookatCameraController obj = (LookatCameraController)ToLua.CheckObject(L, 1, typeof(LookatCameraController));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.SetCameraPosition(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCameraRotation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LookatCameraController obj = (LookatCameraController)ToLua.CheckObject(L, 1, typeof(LookatCameraController));
			UnityEngine.Quaternion arg0 = ToLua.ToQuaternion(L, 2);
			obj.SetCameraRotation(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCameraRotation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LookatCameraController obj = (LookatCameraController)ToLua.CheckObject(L, 1, typeof(LookatCameraController));
			UnityEngine.Quaternion o = obj.GetCameraRotation();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CaculateCameraAngle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LookatCameraController obj = (LookatCameraController)ToLua.CheckObject(L, 1, typeof(LookatCameraController));
			float o = obj.CaculateCameraAngle();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ValidateDistance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LookatCameraController obj = (LookatCameraController)ToLua.CheckObject(L, 1, typeof(LookatCameraController));
			obj.ValidateDistance();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CaculateCameraLookat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LookatCameraController obj = (LookatCameraController)ToLua.CheckObject(L, 1, typeof(LookatCameraController));
			UnityEngine.Vector3 o = obj.CaculateCameraLookat();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CaculatePose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			LookatCameraController obj = (LookatCameraController)ToLua.CheckObject(L, 1, typeof(LookatCameraController));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			UnityEngine.Vector3 o = obj.CaculatePose(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AdjustCameraForLookat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LookatCameraController obj = (LookatCameraController)ToLua.CheckObject(L, 1, typeof(LookatCameraController));
			obj.AdjustCameraForLookat();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayMove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LookatCameraController obj = (LookatCameraController)ToLua.CheckObject(L, 1, typeof(LookatCameraController));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			System.Action arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action)ToLua.CheckObject(L, 3, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			obj.PlayMove(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopMoving(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LookatCameraController obj = (LookatCameraController)ToLua.CheckObject(L, 1, typeof(LookatCameraController));
			obj.StopMoving();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LookatCameraController obj = (LookatCameraController)ToLua.CheckObject(L, 1, typeof(LookatCameraController));
			obj.MoveCamera();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LookatCameraController obj = (LookatCameraController)ToLua.CheckObject(L, 1, typeof(LookatCameraController));
			obj.UpdateCamera();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Start(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LookatCameraController obj = (LookatCameraController)ToLua.CheckObject(L, 1, typeof(LookatCameraController));
			obj.Start();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lookat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LookatCameraController obj = (LookatCameraController)ToLua.CheckObject(L, 1, typeof(LookatCameraController));
			obj.Lookat();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LateUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LookatCameraController obj = (LookatCameraController)ToLua.CheckObject(L, 1, typeof(LookatCameraController));
			obj.LateUpdate();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_target(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LookatCameraController obj = (LookatCameraController)o;
			UnityEngine.Transform ret = obj.target;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index target on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_offset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LookatCameraController obj = (LookatCameraController)o;
			UnityEngine.Vector3 ret = obj.offset;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index offset on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_distance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LookatCameraController obj = (LookatCameraController)o;
			float ret = obj.distance;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index distance on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_minDistance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LookatCameraController obj = (LookatCameraController)o;
			float ret = obj.minDistance;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index minDistance on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxDistance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LookatCameraController obj = (LookatCameraController)o;
			float ret = obj.maxDistance;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index maxDistance on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lon(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LookatCameraController obj = (LookatCameraController)o;
			float ret = obj.lon;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index lon on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lat(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LookatCameraController obj = (LookatCameraController)o;
			float ret = obj.lat;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index lat on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isMoving(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LookatCameraController obj = (LookatCameraController)o;
			bool ret = obj.isMoving;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isMoving on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_moveSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LookatCameraController obj = (LookatCameraController)o;
			float ret = obj.moveSpeed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index moveSpeed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_target(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LookatCameraController obj = (LookatCameraController)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			obj.target = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index target on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_offset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LookatCameraController obj = (LookatCameraController)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.offset = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index offset on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_distance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LookatCameraController obj = (LookatCameraController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.distance = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index distance on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_minDistance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LookatCameraController obj = (LookatCameraController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.minDistance = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index minDistance on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_maxDistance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LookatCameraController obj = (LookatCameraController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.maxDistance = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index maxDistance on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lon(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LookatCameraController obj = (LookatCameraController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.lon = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index lon on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lat(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LookatCameraController obj = (LookatCameraController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.lat = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index lat on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isMoving(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LookatCameraController obj = (LookatCameraController)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isMoving = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isMoving on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_moveSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LookatCameraController obj = (LookatCameraController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.moveSpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index moveSpeed on a nil value" : e.Message);
		}
	}
}

