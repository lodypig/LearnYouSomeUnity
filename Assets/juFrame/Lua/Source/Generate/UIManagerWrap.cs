//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UIManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UIManager), typeof(Singleton<UIManager>));
		L.RegFunction("AddToLayer", AddToLayer);
		L.RegFunction("RemoveFromLayer", RemoveFromLayer);
		L.RegFunction("GetPanelLayer", GetPanelLayer);
		L.RegFunction("Update", Update);
		L.RegFunction("IsSecondClass", IsSecondClass);
		L.RegFunction("GetInstance", GetInstance);
		L.RegFunction("IsFrequentUI", IsFrequentUI);
		L.RegFunction("RegisterLostFocus", RegisterLostFocus);
		L.RegFunction("RemoveLostFocus", RemoveLostFocus);
		L.RegFunction("ClearAllUI", ClearAllUI);
		L.RegFunction("DestoryAllUI", DestoryAllUI);
		L.RegFunction("FireLostFocusEvent", FireLostFocusEvent);
		L.RegFunction("CallLuaMethod", CallLuaMethod);
		L.RegFunction("FindUI", FindUI);
		L.RegFunction("FindAllUI", FindAllUI);
		L.RegFunction("HasUI", HasUI);
		L.RegFunction("ShowUI", ShowUI);
		L.RegFunction("HideUI", HideUI);
		L.RegFunction("SetUIShow", SetUIShow);
		L.RegFunction("ToggleUIShow", ToggleUIShow);
		L.RegFunction("IsUIShow", IsUIShow);
		L.RegFunction("IsUIHide", IsUIHide);
		L.RegFunction("FindFullScreenUI", FindFullScreenUI);
		L.RegFunction("LoadFullScreenCallBack", LoadFullScreenCallBack);
		L.RegFunction("LoadUICallBack", LoadUICallBack);
		L.RegFunction("OnTransMaskClick", OnTransMaskClick);
		L.RegFunction("AddFullScreenDlg", AddFullScreenDlg);
		L.RegFunction("AddDlg", AddDlg);
		L.RegFunction("DestoryDlg", DestoryDlg);
		L.RegFunction("CloseUI", CloseUI);
		L.RegFunction("New", _CreateUIManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("fullScreenDict", get_fullScreenDict, set_fullScreenDict);
		L.RegVar("goDict", get_goDict, set_goDict);
		L.RegVar("dictPanels", get_dictPanels, set_dictPanels);
		L.RegVar("commonDlgStack", get_commonDlgStack, set_commonDlgStack);
		L.RegVar("constDict", get_constDict, set_constDict);
		L.RegVar("constUpIndex", get_constUpIndex, set_constUpIndex);
		L.RegVar("constDownIndex", get_constDownIndex, set_constDownIndex);
		L.RegVar("constUpList", get_constUpList, set_constUpList);
		L.RegVar("constDownList", get_constDownList, set_constDownList);
		L.RegVar("MoveDlgList", get_MoveDlgList, set_MoveDlgList);
		L.RegVar("lostFocusList", get_lostFocusList, set_lostFocusList);
		L.RegVar("IsAnyUIOpen", get_IsAnyUIOpen, null);
		L.RegVar("IsPointerOverGameObject", get_IsPointerOverGameObject, null);
		L.RegVar("SysLayer", get_SysLayer, null);
		L.RegVar("MainUI", get_MainUI, null);
		L.RegVar("UIChat", get_UIChat, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUIManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UIManager obj = new UIManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UIManager.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddToLayer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIManager), typeof(WindowLayer), typeof(UIController)))
			{
				UIManager obj = (UIManager)ToLua.ToObject(L, 1);
				WindowLayer arg0 = (WindowLayer)ToLua.ToObject(L, 2);
				UIController arg1 = (UIController)ToLua.ToObject(L, 3);
				obj.AddToLayer(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIManager), typeof(WindowLayer), typeof(UnityEngine.GameObject)))
			{
				UIManager obj = (UIManager)ToLua.ToObject(L, 1);
				WindowLayer arg0 = (WindowLayer)ToLua.ToObject(L, 2);
				UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.ToObject(L, 3);
				obj.AddToLayer(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIManager.AddToLayer");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveFromLayer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIManager), typeof(UnityEngine.GameObject)))
			{
				UIManager obj = (UIManager)ToLua.ToObject(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 2);
				obj.RemoveFromLayer(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIManager), typeof(WindowLayer), typeof(UIController)))
			{
				UIManager obj = (UIManager)ToLua.ToObject(L, 1);
				WindowLayer arg0 = (WindowLayer)ToLua.ToObject(L, 2);
				UIController arg1 = (UIController)ToLua.ToObject(L, 3);
				obj.RemoveFromLayer(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIManager.RemoveFromLayer");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPanelLayer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			WindowLayer arg0 = (WindowLayer)ToLua.CheckObject(L, 2, typeof(WindowLayer));
			System.Collections.Generic.List<UIController> o = obj.GetPanelLayer(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			obj.Update();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsSecondClass(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.IsSecondClass(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInstance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UIManager o = UIManager.GetInstance();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsFrequentUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.IsFrequentUI(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterLostFocus(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			obj.RegisterLostFocus(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveLostFocus(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			obj.RemoveLostFocus(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearAllUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			obj.ClearAllUI();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestoryAllUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			obj.DestoryAllUI();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FireLostFocusEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			obj.FireLostFocusEvent(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CallLuaMethod(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIManager), typeof(string)))
			{
				UIManager obj = (UIManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				object[] o = obj.CallLuaMethod(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes(L, 1, typeof(UIManager), typeof(string)) && TypeChecker.CheckParamsType(L, typeof(object), 3, count - 2))
			{
				UIManager obj = (UIManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				object[] arg1 = ToLua.ToParamsObject(L, 3, count - 2);
				object[] o = obj.CallLuaMethod(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIManager.CallLuaMethod");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			string arg0 = ToLua.CheckString(L, 2);
			UIWrapper o = obj.FindUI(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindAllUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			string arg0 = ToLua.CheckString(L, 2);
			System.Collections.Generic.List<UnityEngine.GameObject> o = obj.FindAllUI(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.HasUI(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			string arg0 = ToLua.CheckString(L, 2);
			obj.ShowUI(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HideUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			string arg0 = ToLua.CheckString(L, 2);
			obj.HideUI(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetUIShow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			string arg0 = ToLua.CheckString(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.SetUIShow(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToggleUIShow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			string arg0 = ToLua.CheckString(L, 2);
			obj.ToggleUIShow(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsUIShow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.IsUIShow(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsUIHide(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.IsUIHide(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindFullScreenUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			string arg0 = ToLua.CheckString(L, 2);
			UIWrapper o = obj.FindFullScreenUI(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadFullScreenCallBack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			UIExtendType arg0 = (UIExtendType)ToLua.CheckObject(L, 2, typeof(UIExtendType));
			AssetLoader arg1 = (AssetLoader)ToLua.CheckObject(L, 3, typeof(AssetLoader));
			UnityEngine.Object arg2 = (UnityEngine.Object)ToLua.CheckUnityObject(L, 4, typeof(UnityEngine.Object));
			UnityEngine.GameObject o = obj.LoadFullScreenCallBack(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadUICallBack(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 9 && TypeChecker.CheckTypes(L, 1, typeof(UIManager), typeof(AssetLoader), typeof(WindowLayer), typeof(UnityEngine.Object), typeof(UIExtendType), typeof(UIOpenType), typeof(bool), typeof(bool), typeof(int)))
			{
				UIManager obj = (UIManager)ToLua.ToObject(L, 1);
				AssetLoader arg0 = (AssetLoader)ToLua.ToObject(L, 2);
				WindowLayer arg1 = (WindowLayer)ToLua.ToObject(L, 3);
				UnityEngine.Object arg2 = (UnityEngine.Object)ToLua.ToObject(L, 4);
				UIExtendType arg3 = (UIExtendType)ToLua.ToObject(L, 5);
				UIOpenType arg4 = (UIOpenType)ToLua.ToObject(L, 6);
				bool arg5 = LuaDLL.lua_toboolean(L, 7);
				bool arg6 = LuaDLL.lua_toboolean(L, 8);
				int arg7 = (int)LuaDLL.lua_tonumber(L, 9);
				UnityEngine.GameObject o = obj.LoadUICallBack(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 12 && TypeChecker.CheckTypes(L, 1, typeof(UIManager), typeof(UnityEngine.UI.CanvasScaler.ScreenMatchMode), typeof(WindowLayer), typeof(float), typeof(AssetLoader), typeof(UnityEngine.Object), typeof(UIExtendType), typeof(UIOpenType), typeof(UILayerType), typeof(bool), typeof(bool), typeof(int)))
			{
				UIManager obj = (UIManager)ToLua.ToObject(L, 1);
				UnityEngine.UI.CanvasScaler.ScreenMatchMode arg0 = (UnityEngine.UI.CanvasScaler.ScreenMatchMode)ToLua.ToObject(L, 2);
				WindowLayer arg1 = (WindowLayer)ToLua.ToObject(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				AssetLoader arg3 = (AssetLoader)ToLua.ToObject(L, 5);
				UnityEngine.Object arg4 = (UnityEngine.Object)ToLua.ToObject(L, 6);
				UIExtendType arg5 = (UIExtendType)ToLua.ToObject(L, 7);
				UIOpenType arg6 = (UIOpenType)ToLua.ToObject(L, 8);
				UILayerType arg7 = (UILayerType)ToLua.ToObject(L, 9);
				bool arg8 = LuaDLL.lua_toboolean(L, 10);
				bool arg9 = LuaDLL.lua_toboolean(L, 11);
				int arg10 = (int)LuaDLL.lua_tonumber(L, 12);
				UnityEngine.GameObject o = obj.LoadUICallBack(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIManager.LoadUICallBack");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnTransMaskClick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			obj.OnTransMaskClick(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddFullScreenDlg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			UILayerType arg1 = (UILayerType)ToLua.CheckObject(L, 3, typeof(UILayerType));
			UILayer o = obj.AddFullScreenDlg(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddDlg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			WindowLayer arg1 = (WindowLayer)ToLua.CheckObject(L, 3, typeof(WindowLayer));
			UIOpenType arg2 = (UIOpenType)ToLua.CheckObject(L, 4, typeof(UIOpenType));
			bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
			bool arg4 = LuaDLL.luaL_checkboolean(L, 6);
			int arg5 = (int)LuaDLL.luaL_checknumber(L, 7);
			UILayer o = obj.AddDlg(arg0, arg1, arg2, arg3, arg4, arg5);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestoryDlg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			obj.DestoryDlg(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			string arg0 = ToLua.CheckString(L, 2);
			obj.CloseUI(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_fullScreenDict(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			System.Collections.Generic.Dictionary<string,UnityEngine.GameObject> ret = obj.fullScreenDict;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index fullScreenDict on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_goDict(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			System.Collections.Generic.Dictionary<string,System.Collections.Generic.List<UnityEngine.GameObject>> ret = obj.goDict;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index goDict on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_dictPanels(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			System.Collections.Generic.SortedDictionary<WindowLayer,System.Collections.Generic.List<UIController>> ret = obj.dictPanels;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index dictPanels on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_commonDlgStack(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			System.Collections.Generic.Stack<UILayer> ret = obj.commonDlgStack;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index commonDlgStack on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_constDict(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			System.Collections.Generic.Dictionary<string,System.Collections.Generic.List<UnityEngine.GameObject>> ret = obj.constDict;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index constDict on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_constUpIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			int ret = obj.constUpIndex;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index constUpIndex on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_constDownIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			int ret = obj.constDownIndex;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index constDownIndex on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_constUpList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			System.Collections.Generic.List<UILayer> ret = obj.constUpList;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index constUpList on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_constDownList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			System.Collections.Generic.List<UILayer> ret = obj.constDownList;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index constDownList on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MoveDlgList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			System.Collections.Generic.List<UnityEngine.GameObject> ret = obj.MoveDlgList;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MoveDlgList on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lostFocusList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			System.Collections.Generic.List<UnityEngine.GameObject> ret = obj.lostFocusList;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index lostFocusList on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsAnyUIOpen(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			bool ret = obj.IsAnyUIOpen;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsAnyUIOpen on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsPointerOverGameObject(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UIManager.IsPointerOverGameObject);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SysLayer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			SysInfoLayer ret = obj.SysLayer;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SysLayer on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MainUI(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			UILayer ret = obj.MainUI;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MainUI on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UIChat(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			UILayer ret = obj.UIChat;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UIChat on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_fullScreenDict(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			System.Collections.Generic.Dictionary<string,UnityEngine.GameObject> arg0 = (System.Collections.Generic.Dictionary<string,UnityEngine.GameObject>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<string,UnityEngine.GameObject>));
			obj.fullScreenDict = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index fullScreenDict on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_goDict(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			System.Collections.Generic.Dictionary<string,System.Collections.Generic.List<UnityEngine.GameObject>> arg0 = (System.Collections.Generic.Dictionary<string,System.Collections.Generic.List<UnityEngine.GameObject>>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<string,System.Collections.Generic.List<UnityEngine.GameObject>>));
			obj.goDict = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index goDict on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_dictPanels(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			System.Collections.Generic.SortedDictionary<WindowLayer,System.Collections.Generic.List<UIController>> arg0 = (System.Collections.Generic.SortedDictionary<WindowLayer,System.Collections.Generic.List<UIController>>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.SortedDictionary<WindowLayer,System.Collections.Generic.List<UIController>>));
			obj.dictPanels = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index dictPanels on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_commonDlgStack(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			System.Collections.Generic.Stack<UILayer> arg0 = (System.Collections.Generic.Stack<UILayer>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Stack<UILayer>));
			obj.commonDlgStack = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index commonDlgStack on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_constDict(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			System.Collections.Generic.Dictionary<string,System.Collections.Generic.List<UnityEngine.GameObject>> arg0 = (System.Collections.Generic.Dictionary<string,System.Collections.Generic.List<UnityEngine.GameObject>>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<string,System.Collections.Generic.List<UnityEngine.GameObject>>));
			obj.constDict = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index constDict on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_constUpIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.constUpIndex = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index constUpIndex on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_constDownIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.constDownIndex = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index constDownIndex on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_constUpList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			System.Collections.Generic.List<UILayer> arg0 = (System.Collections.Generic.List<UILayer>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UILayer>));
			obj.constUpList = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index constUpList on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_constDownList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			System.Collections.Generic.List<UILayer> arg0 = (System.Collections.Generic.List<UILayer>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UILayer>));
			obj.constDownList = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index constDownList on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MoveDlgList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			System.Collections.Generic.List<UnityEngine.GameObject> arg0 = (System.Collections.Generic.List<UnityEngine.GameObject>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.GameObject>));
			obj.MoveDlgList = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MoveDlgList on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lostFocusList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			System.Collections.Generic.List<UnityEngine.GameObject> arg0 = (System.Collections.Generic.List<UnityEngine.GameObject>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.GameObject>));
			obj.lostFocusList = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index lostFocusList on a nil value" : e.Message);
		}
	}
}

