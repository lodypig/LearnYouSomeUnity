//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SceneLoaderWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SceneLoader), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("GetInstance", GetInstance);
		L.RegFunction("ClearActions", ClearActions);
		L.RegFunction("ClearStartAction", ClearStartAction);
		L.RegFunction("ClearPreFinishedAction", ClearPreFinishedAction);
		L.RegFunction("ClearFinishedAction", ClearFinishedAction);
		L.RegFunction("ClearUpdateAction", ClearUpdateAction);
		L.RegFunction("onXiangWeiMapChange", onXiangWeiMapChange);
		L.RegFunction("uLoadLoginScene", uLoadLoginScene);
		L.RegFunction("uLoadScene", uLoadScene);
		L.RegFunction("ReturnToSelectRoleUI", ReturnToSelectRoleUI);
		L.RegFunction("ReturnToLoginUI", ReturnToLoginUI);
		L.RegFunction("ReturnToLoginScene", ReturnToLoginScene);
		L.RegFunction("loadSceneByName", loadSceneByName);
		L.RegFunction("uCreateLoadingUI", uCreateLoadingUI);
		L.RegFunction("ShowLoadingUI", ShowLoadingUI);
		L.RegFunction("UnLoadScene", UnLoadScene);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("szSceneAlias", get_szSceneAlias, set_szSceneAlias);
		L.RegVar("pro", get_pro, set_pro);
		L.RegVar("bFinishedCreateRole", get_bFinishedCreateRole, set_bFinishedCreateRole);
		L.RegVar("_instance", get__instance, set__instance);
		L.RegVar("sceneID", get_sceneID, set_sceneID);
		L.RegVar("sceneName", get_sceneName, set_sceneName);
		L.RegVar("sceneAlias", get_sceneAlias, set_sceneAlias);
		L.RegVar("sceneWidth", get_sceneWidth, set_sceneWidth);
		L.RegVar("scene_sid", get_scene_sid, set_scene_sid);
		L.RegVar("OnStart", get_OnStart, set_OnStart);
		L.RegVar("OnPreFinished", get_OnPreFinished, set_OnPreFinished);
		L.RegVar("OnFinished", get_OnFinished, set_OnFinished);
		L.RegVar("OnUpdate", get_OnUpdate, set_OnUpdate);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInstance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			SceneLoader o = SceneLoader.GetInstance();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearActions(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			SceneLoader.ClearActions();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearStartAction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			SceneLoader.ClearStartAction();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearPreFinishedAction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			SceneLoader.ClearPreFinishedAction();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearFinishedAction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			SceneLoader.ClearFinishedAction();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearUpdateAction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			SceneLoader.ClearUpdateAction();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int onXiangWeiMapChange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SceneLoader obj = (SceneLoader)ToLua.CheckObject(L, 1, typeof(SceneLoader));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.onXiangWeiMapChange(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int uLoadLoginScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SceneLoader obj = (SceneLoader)ToLua.CheckObject(L, 1, typeof(SceneLoader));
			string arg0 = ToLua.CheckString(L, 2);
			obj.uLoadLoginScene(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int uLoadScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			SceneLoader obj = (SceneLoader)ToLua.CheckObject(L, 1, typeof(SceneLoader));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 6);
			int[] arg5 = ToLua.CheckNumberArray<int>(L, 7);
			obj.uLoadScene(arg0, arg1, arg2, arg3, arg4, arg5);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReturnToSelectRoleUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SceneLoader obj = (SceneLoader)ToLua.CheckObject(L, 1, typeof(SceneLoader));
			obj.ReturnToSelectRoleUI();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReturnToLoginUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SceneLoader obj = (SceneLoader)ToLua.CheckObject(L, 1, typeof(SceneLoader));
			obj.ReturnToLoginUI();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReturnToLoginScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SceneLoader obj = (SceneLoader)ToLua.CheckObject(L, 1, typeof(SceneLoader));
			obj.ReturnToLoginScene();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int loadSceneByName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SceneLoader obj = (SceneLoader)ToLua.CheckObject(L, 1, typeof(SceneLoader));
			string arg0 = ToLua.CheckString(L, 2);
			obj.loadSceneByName(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int uCreateLoadingUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SceneLoader obj = (SceneLoader)ToLua.CheckObject(L, 1, typeof(SceneLoader));
			obj.uCreateLoadingUI();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowLoadingUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SceneLoader obj = (SceneLoader)ToLua.CheckObject(L, 1, typeof(SceneLoader));
			obj.ShowLoadingUI();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnLoadScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SceneLoader obj = (SceneLoader)ToLua.CheckObject(L, 1, typeof(SceneLoader));
			obj.UnLoadScene();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_szSceneAlias(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneLoader obj = (SceneLoader)o;
			string ret = obj.szSceneAlias;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index szSceneAlias on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pro(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneLoader obj = (SceneLoader)o;
			Scene ret = obj.pro;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pro on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bFinishedCreateRole(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneLoader obj = (SceneLoader)o;
			bool ret = obj.bFinishedCreateRole;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index bFinishedCreateRole on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get__instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, SceneLoader._instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sceneID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneLoader obj = (SceneLoader)o;
			int ret = obj.sceneID;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index sceneID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sceneName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneLoader obj = (SceneLoader)o;
			string ret = obj.sceneName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index sceneName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sceneAlias(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneLoader obj = (SceneLoader)o;
			string ret = obj.sceneAlias;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index sceneAlias on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sceneWidth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneLoader obj = (SceneLoader)o;
			int ret = obj.sceneWidth;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index sceneWidth on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_scene_sid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneLoader obj = (SceneLoader)o;
			int ret = obj.scene_sid;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index scene_sid on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnStart(IntPtr L)
	{
		ToLua.Push(L, new EventObject("SceneLoader.OnStart"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnPreFinished(IntPtr L)
	{
		ToLua.Push(L, new EventObject("SceneLoader.OnPreFinished"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnFinished(IntPtr L)
	{
		ToLua.Push(L, new EventObject("SceneLoader.OnFinished"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnUpdate(IntPtr L)
	{
		ToLua.Push(L, new EventObject("SceneLoader.OnUpdate"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_szSceneAlias(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneLoader obj = (SceneLoader)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.szSceneAlias = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index szSceneAlias on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pro(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneLoader obj = (SceneLoader)o;
			Scene arg0 = (Scene)ToLua.CheckObject(L, 2, typeof(Scene));
			obj.pro = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pro on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bFinishedCreateRole(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneLoader obj = (SceneLoader)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.bFinishedCreateRole = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index bFinishedCreateRole on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set__instance(IntPtr L)
	{
		try
		{
			SceneLoader arg0 = (SceneLoader)ToLua.CheckUnityObject(L, 2, typeof(SceneLoader));
			SceneLoader._instance = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sceneID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneLoader obj = (SceneLoader)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.sceneID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index sceneID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sceneName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneLoader obj = (SceneLoader)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.sceneName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index sceneName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sceneAlias(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneLoader obj = (SceneLoader)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.sceneAlias = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index sceneAlias on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sceneWidth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneLoader obj = (SceneLoader)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.sceneWidth = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index sceneWidth on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_scene_sid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneLoader obj = (SceneLoader)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.scene_sid = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index scene_sid on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnStart(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SceneLoader.OnStart' can only appear on the left hand side of += or -= when used outside of the type 'SceneLoader'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action ev = (System.Action)DelegateFactory.CreateDelegate(typeof(System.Action), arg0.func);
				SceneLoader.OnStart += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action ev = (System.Action)LuaMisc.GetEventHandler(null, typeof(SceneLoader), "OnStart");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.Action)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						SceneLoader.OnStart -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnPreFinished(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SceneLoader.OnPreFinished' can only appear on the left hand side of += or -= when used outside of the type 'SceneLoader'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action ev = (System.Action)DelegateFactory.CreateDelegate(typeof(System.Action), arg0.func);
				SceneLoader.OnPreFinished += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action ev = (System.Action)LuaMisc.GetEventHandler(null, typeof(SceneLoader), "OnPreFinished");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.Action)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						SceneLoader.OnPreFinished -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnFinished(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SceneLoader.OnFinished' can only appear on the left hand side of += or -= when used outside of the type 'SceneLoader'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action ev = (System.Action)DelegateFactory.CreateDelegate(typeof(System.Action), arg0.func);
				SceneLoader.OnFinished += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action ev = (System.Action)LuaMisc.GetEventHandler(null, typeof(SceneLoader), "OnFinished");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.Action)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						SceneLoader.OnFinished -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnUpdate(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SceneLoader.OnUpdate' can only appear on the left hand side of += or -= when used outside of the type 'SceneLoader'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<float> ev = (System.Action<float>)DelegateFactory.CreateDelegate(typeof(System.Action<float>), arg0.func);
				SceneLoader.OnUpdate += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<float> ev = (System.Action<float>)LuaMisc.GetEventHandler(null, typeof(SceneLoader), "OnUpdate");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.Action<float>)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						SceneLoader.OnUpdate -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

