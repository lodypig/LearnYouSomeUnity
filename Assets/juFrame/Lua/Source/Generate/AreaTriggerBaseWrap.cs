//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class AreaTriggerBaseWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(AreaTriggerBase), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("SaveTime", SaveTime);
		L.RegFunction("InTriggerNow", InTriggerNow);
		L.RegFunction("BindEnterCallBack", BindEnterCallBack);
		L.RegFunction("BindStayCallBack", BindStayCallBack);
		L.RegFunction("BindLeaveCallBack", BindLeaveCallBack);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("type", get_type, set_type);
		L.RegVar("respondTime", get_respondTime, set_respondTime);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AreaTriggerBase obj = (AreaTriggerBase)ToLua.CheckObject(L, 1, typeof(AreaTriggerBase));
			obj.SaveTime();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InTriggerNow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AreaTriggerBase obj = (AreaTriggerBase)ToLua.CheckObject(L, 1, typeof(AreaTriggerBase));
			bool o = obj.InTriggerNow();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindEnterCallBack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AreaTriggerBase obj = (AreaTriggerBase)ToLua.CheckObject(L, 1, typeof(AreaTriggerBase));
			System.Action<UnityEngine.GameObject> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.GameObject>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.GameObject>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.GameObject>), func) as System.Action<UnityEngine.GameObject>;
			}

			obj.BindEnterCallBack(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindStayCallBack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AreaTriggerBase obj = (AreaTriggerBase)ToLua.CheckObject(L, 1, typeof(AreaTriggerBase));
			System.Action<UnityEngine.GameObject> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.GameObject>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.GameObject>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.GameObject>), func) as System.Action<UnityEngine.GameObject>;
			}

			obj.BindStayCallBack(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindLeaveCallBack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AreaTriggerBase obj = (AreaTriggerBase)ToLua.CheckObject(L, 1, typeof(AreaTriggerBase));
			System.Action<UnityEngine.GameObject> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.GameObject>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.GameObject>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.GameObject>), func) as System.Action<UnityEngine.GameObject>;
			}

			obj.BindLeaveCallBack(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AreaTriggerBase obj = (AreaTriggerBase)o;
			AreaTriggerBase.AreaTriggerType ret = obj.type;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index type on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_respondTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AreaTriggerBase obj = (AreaTriggerBase)o;
			float ret = obj.respondTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index respondTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AreaTriggerBase obj = (AreaTriggerBase)o;
			AreaTriggerBase.AreaTriggerType arg0 = (AreaTriggerBase.AreaTriggerType)ToLua.CheckObject(L, 2, typeof(AreaTriggerBase.AreaTriggerType));
			obj.type = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index type on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_respondTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AreaTriggerBase obj = (AreaTriggerBase)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.respondTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index respondTime on a nil value" : e.Message);
		}
	}
}

